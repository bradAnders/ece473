
thermo3_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  00000b92  2**0
                  ALLOC
  3 .stab         000022bc  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fd  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000414d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004160  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  6c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  70:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  74:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  7c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  80:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  84:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_33>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  8c:	0e 04       	cpc	r0, r14
  8e:	e5 03       	fmuls	r22, r21
  90:	e5 03       	fmuls	r22, r21
  92:	e5 03       	fmuls	r22, r21
  94:	e5 03       	fmuls	r22, r21
  96:	e5 03       	fmuls	r22, r21
  98:	e5 03       	fmuls	r22, r21
  9a:	e5 03       	fmuls	r22, r21
  9c:	0e 04       	cpc	r0, r14
  9e:	e5 03       	fmuls	r22, r21
  a0:	e5 03       	fmuls	r22, r21
  a2:	e5 03       	fmuls	r22, r21
  a4:	e5 03       	fmuls	r22, r21
  a6:	e5 03       	fmuls	r22, r21
  a8:	e5 03       	fmuls	r22, r21
  aa:	e5 03       	fmuls	r22, r21
  ac:	18 04       	cpc	r1, r8
  ae:	e5 03       	fmuls	r22, r21
  b0:	e5 03       	fmuls	r22, r21
  b2:	e5 03       	fmuls	r22, r21
  b4:	e5 03       	fmuls	r22, r21
  b6:	e5 03       	fmuls	r22, r21
  b8:	e5 03       	fmuls	r22, r21
  ba:	e5 03       	fmuls	r22, r21
  bc:	e5 03       	fmuls	r22, r21
  be:	e5 03       	fmuls	r22, r21
  c0:	e5 03       	fmuls	r22, r21
  c2:	e5 03       	fmuls	r22, r21
  c4:	e5 03       	fmuls	r22, r21
  c6:	e5 03       	fmuls	r22, r21
  c8:	e5 03       	fmuls	r22, r21
  ca:	e5 03       	fmuls	r22, r21
  cc:	18 04       	cpc	r1, r8
  ce:	e5 03       	fmuls	r22, r21
  d0:	e5 03       	fmuls	r22, r21
  d2:	e5 03       	fmuls	r22, r21
  d4:	e5 03       	fmuls	r22, r21
  d6:	e5 03       	fmuls	r22, r21
  d8:	e5 03       	fmuls	r22, r21
  da:	e5 03       	fmuls	r22, r21
  dc:	e5 03       	fmuls	r22, r21
  de:	e5 03       	fmuls	r22, r21
  e0:	e5 03       	fmuls	r22, r21
  e2:	e5 03       	fmuls	r22, r21
  e4:	e5 03       	fmuls	r22, r21
  e6:	e5 03       	fmuls	r22, r21
  e8:	e5 03       	fmuls	r22, r21
  ea:	e5 03       	fmuls	r22, r21
  ec:	2f 04       	cpc	r2, r15
  ee:	e5 03       	fmuls	r22, r21
  f0:	e5 03       	fmuls	r22, r21
  f2:	e5 03       	fmuls	r22, r21
  f4:	e5 03       	fmuls	r22, r21
  f6:	e5 03       	fmuls	r22, r21
  f8:	e5 03       	fmuls	r22, r21
  fa:	e5 03       	fmuls	r22, r21
  fc:	33 04       	cpc	r3, r3
  fe:	e5 03       	fmuls	r22, r21
 100:	e5 03       	fmuls	r22, r21
 102:	e5 03       	fmuls	r22, r21
 104:	e5 03       	fmuls	r22, r21
 106:	e5 03       	fmuls	r22, r21
 108:	e5 03       	fmuls	r22, r21
 10a:	e5 03       	fmuls	r22, r21
 10c:	e5 03       	fmuls	r22, r21
 10e:	e5 03       	fmuls	r22, r21
 110:	e5 03       	fmuls	r22, r21
 112:	e5 03       	fmuls	r22, r21
 114:	e5 03       	fmuls	r22, r21
 116:	e5 03       	fmuls	r22, r21
 118:	e5 03       	fmuls	r22, r21
 11a:	e5 03       	fmuls	r22, r21
 11c:	41 04       	cpc	r4, r1
 11e:	e5 03       	fmuls	r22, r21
 120:	e5 03       	fmuls	r22, r21
 122:	e5 03       	fmuls	r22, r21
 124:	e5 03       	fmuls	r22, r21
 126:	e5 03       	fmuls	r22, r21
 128:	e5 03       	fmuls	r22, r21
 12a:	e5 03       	fmuls	r22, r21
 12c:	ff 03       	fmulsu	r23, r23

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ac 33       	cpi	r26, 0x3C	; 60
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 8b 04 	call	0x916	; 0x916 <main>
 14e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <spi_init>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 156:	87 b3       	in	r24, 0x17	; 23
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR=(1<<SPE) | (1<<MSTR); 
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	8e b9       	out	0x0e, r24	; 14
 164:	08 95       	ret

00000166 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	81 11       	cpse	r24, r1
 16a:	01 c0       	rjmp	.+2      	; 0x16e <send_lcd+0x8>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 170:	77 9b       	sbis	0x0e, 7	; 14
 172:	fe cf       	rjmp	.-4      	; 0x170 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 174:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 176:	77 9b       	sbis	0x0e, 7	; 14
 178:	fe cf       	rjmp	.-4      	; 0x176 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 17a:	80 91 62 00 	lds	r24, 0x0062
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	80 93 62 00 	sts	0x0062, r24
 184:	80 91 62 00 	lds	r24, 0x0062
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	80 93 62 00 	sts	0x0062, r24
 18e:	08 95       	ret

00000190 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 190:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 192:	c0 91 00 01 	lds	r28, 0x0100
 196:	8c 0f       	add	r24, r28
 198:	91 1d       	adc	r25, r1
 19a:	fc 01       	movw	r30, r24
 19c:	60 81       	ld	r22, Z
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 i++;   //increment to next character
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8c 0f       	add	r24, r28
 1a8:	80 93 00 01 	sts	0x0100, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 1ac:	80 31       	cpi	r24, 0x10	; 16
 1ae:	81 f0       	breq	.+32     	; 0x1d0 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 1b0:	80 32       	cpi	r24, 0x20	; 32
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <refresh_lcd+0x28>
}//refresh_lcd
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	85 ed       	ldi	r24, 0xD5	; 213
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <refresh_lcd+0x2a>
 1be:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 1c0:	60 e8       	ldi	r22, 0x80	; 128
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 1c8:	10 92 00 01 	sts	0x0100, r1
}//refresh_lcd
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret
 1d0:	f5 ed       	ldi	r31, 0xD5	; 213
 1d2:	fa 95       	dec	r31
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <refresh_lcd+0x42>
 1d6:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 1d8:	60 ec       	ldi	r22, 0xC0	; 192
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 1e0:	80 91 00 01 	lds	r24, 0x0100
 1e4:	e5 cf       	rjmp	.-54     	; 0x1b0 <refresh_lcd+0x20>

000001e6 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	1f 92       	push	r1
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 1fa:	66 0f       	add	r22, r22
 1fc:	66 0f       	add	r22, r22
 1fe:	66 0f       	add	r22, r22
 200:	60 5c       	subi	r22, 0xC0	; 192
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	99 83       	std	Y+1, r25	; 0x01
 206:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 20a:	85 ed       	ldi	r24, 0xD5	; 213
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <set_custom_character+0x26>
 210:	00 00       	nop
 212:	e1 2e       	mov	r14, r17
 214:	99 81       	ldd	r25, Y+1	; 0x01
 216:	f9 2e       	mov	r15, r25
 218:	87 01       	movw	r16, r14
 21a:	08 5f       	subi	r16, 0xF8	; 248
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 21e:	f7 01       	movw	r30, r14
 220:	61 91       	ld	r22, Z+
 222:	7f 01       	movw	r14, r30
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 22a:	f5 ed       	ldi	r31, 0xD5	; 213
 22c:	fa 95       	dec	r31
 22e:	f1 f7       	brne	.-4      	; 0x22c <set_custom_character+0x46>
 230:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 232:	e0 16       	cp	r14, r16
 234:	f1 06       	cpc	r15, r17
 236:	99 f7       	brne	.-26     	; 0x21e <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	08 95       	ret

00000248 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 248:	90 e4       	ldi	r25, 0x40	; 64
 24a:	89 9f       	mul	r24, r25
 24c:	60 0d       	add	r22, r0
 24e:	11 24       	eor	r1, r1
 250:	60 5c       	subi	r22, 0xC0	; 192
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

00000258 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 258:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 25a:	88 23       	and	r24, r24
 25c:	b9 f1       	breq	.+110    	; 0x2cc <uint2lcd+0x74>
 25e:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 260:	84 36       	cpi	r24, 0x64	; 100
 262:	98 f4       	brcc	.+38     	; 0x28a <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	d8 f4       	brcc	.+54     	; 0x29e <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 268:	8d ec       	ldi	r24, 0xCD	; 205
 26a:	c8 9f       	mul	r28, r24
 26c:	81 2d       	mov	r24, r1
 26e:	11 24       	eor	r1, r1
 270:	86 95       	lsr	r24
 272:	86 95       	lsr	r24
 274:	86 95       	lsr	r24
 276:	6c 2f       	mov	r22, r28
 278:	2a e0       	ldi	r18, 0x0A	; 10
 27a:	82 9f       	mul	r24, r18
 27c:	60 19       	sub	r22, r0
 27e:	11 24       	eor	r1, r1
 280:	60 5d       	subi	r22, 0xD0	; 208
 282:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 284:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 286:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 28a:	69 e2       	ldi	r22, 0x29	; 41
 28c:	86 9f       	mul	r24, r22
 28e:	61 2d       	mov	r22, r1
 290:	11 24       	eor	r1, r1
 292:	62 95       	swap	r22
 294:	6f 70       	andi	r22, 0x0F	; 15
 296:	60 5d       	subi	r22, 0xD0	; 208
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 29e:	89 e2       	ldi	r24, 0x29	; 41
 2a0:	c8 9f       	mul	r28, r24
 2a2:	81 2d       	mov	r24, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	82 95       	swap	r24
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	9c 2f       	mov	r25, r28
 2ac:	24 e6       	ldi	r18, 0x64	; 100
 2ae:	82 9f       	mul	r24, r18
 2b0:	90 19       	sub	r25, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	6d ec       	ldi	r22, 0xCD	; 205
 2b6:	96 9f       	mul	r25, r22
 2b8:	61 2d       	mov	r22, r1
 2ba:	11 24       	eor	r1, r1
 2bc:	66 95       	lsr	r22
 2be:	66 95       	lsr	r22
 2c0:	66 95       	lsr	r22
 2c2:	60 5d       	subi	r22, 0xD0	; 208
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 2ca:	ce cf       	rjmp	.-100    	; 0x268 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 2cc:	60 e3       	ldi	r22, 0x30	; 48
 2ce:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 2d0:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 2d2:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

000002d6 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 2d6:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 2d8:	87 fd       	sbrc	r24, 7
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 2dc:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 2de:	0c 94 2c 01 	jmp	0x258	; 0x258 <uint2lcd>
 2e2:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 2e4:	6d e2       	ldi	r22, 0x2D	; 45
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 2ec:	85 ed       	ldi	r24, 0xD5	; 213
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <int2lcd+0x18>
 2f2:	00 00       	nop
 2f4:	8c 2f       	mov	r24, r28
 2f6:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 2f8:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 2fa:	0c 94 2c 01 	jmp	0x258	; 0x258 <uint2lcd>

000002fe <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 2fe:	6e e0       	ldi	r22, 0x0E	; 14
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

00000306 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 306:	6c e0       	ldi	r22, 0x0C	; 12
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

0000030e <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 30e:	6e e1       	ldi	r22, 0x1E	; 30
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

00000316 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 316:	68 e1       	ldi	r22, 0x18	; 24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

0000031e <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 31e:	e2 e6       	ldi	r30, 0x62	; 98
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 60       	ori	r24, 0x08	; 8
 326:	80 83       	st	Z, r24
 328:	80 81       	ld	r24, Z
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret

00000330 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 338:	8f e1       	ldi	r24, 0x1F	; 31
 33a:	9c e1       	ldi	r25, 0x1C	; 28
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <clear_display+0xc>
 340:	00 c0       	rjmp	.+0      	; 0x342 <clear_display+0x12>
 342:	00 00       	nop
 344:	08 95       	ret

00000346 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 34e:	8f e6       	ldi	r24, 0x6F	; 111
 350:	97 e1       	ldi	r25, 0x17	; 23
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <cursor_home+0xc>
 356:	00 c0       	rjmp	.+0      	; 0x358 <cursor_home+0x12>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 35c:	60 ec       	ldi	r22, 0xC0	; 192
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

00000364 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 364:	60 e8       	ldi	r22, 0x80	; 128
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

0000036c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 36c:	cf 93       	push	r28
 36e:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 370:	60 e2       	ldi	r22, 0x20	; 32
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 378:	85 ed       	ldi	r24, 0xD5	; 213
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <fill_spaces+0xe>
 37e:	00 00       	nop
 380:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 382:	b1 f7       	brne	.-20     	; 0x370 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 388:	68 2f       	mov	r22, r24
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0c 94 b3 00 	jmp	0x166	; 0x166 <send_lcd>

00000390 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	f8 01       	movw	r30, r16
 3a0:	e4 0f       	add	r30, r20
 3a2:	f5 1f       	adc	r31, r21
 3a4:	60 81       	ld	r22, Z
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 3ac:	85 ed       	ldi	r24, 0xD5	; 213
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <string2lcd+0x1e>
 3b2:	00 00       	nop
 3b4:	cf 5f       	subi	r28, 0xFF	; 255
 3b6:	4c 2f       	mov	r20, r28
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	f8 01       	movw	r30, r16
 3bc:	01 90       	ld	r0, Z+
 3be:	00 20       	and	r0, r0
 3c0:	e9 f7       	brne	.-6      	; 0x3bc <string2lcd+0x2c>
 3c2:	9f 01       	movw	r18, r30
 3c4:	20 1b       	sub	r18, r16
 3c6:	31 0b       	sbc	r19, r17
 3c8:	22 50       	subi	r18, 0x02	; 2
 3ca:	31 09       	sbc	r19, r1
 3cc:	24 17       	cp	r18, r20
 3ce:	35 07       	cpc	r19, r21
 3d0:	30 f7       	brcc	.-52     	; 0x39e <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	99 ef       	ldi	r25, 0xF9	; 249
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_init+0x4>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_init+0xa>
 3e4:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 3ec:	60 e3       	ldi	r22, 0x30	; 48
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 3f4:	8f e5       	ldi	r24, 0x5F	; 95
 3f6:	9d e6       	ldi	r25, 0x6D	; 109
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_init+0x1e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <lcd_init+0x24>
 3fe:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 400:	60 e3       	ldi	r22, 0x30	; 48
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 408:	8f e5       	ldi	r24, 0x5F	; 95
 40a:	9d e6       	ldi	r25, 0x6D	; 109
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_init+0x32>
 410:	00 c0       	rjmp	.+0      	; 0x412 <lcd_init+0x38>
 412:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 414:	60 e3       	ldi	r22, 0x30	; 48
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 41c:	8f e5       	ldi	r24, 0x5F	; 95
 41e:	9d e6       	ldi	r25, 0x6D	; 109
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <lcd_init+0x46>
 424:	00 c0       	rjmp	.+0      	; 0x426 <lcd_init+0x4c>
 426:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 428:	68 e3       	ldi	r22, 0x38	; 56
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	9e e4       	ldi	r25, 0x4E	; 78
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <lcd_init+0x5a>
 438:	00 c0       	rjmp	.+0      	; 0x43a <lcd_init+0x60>
 43a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 43c:	68 e0       	ldi	r22, 0x08	; 8
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 444:	8f e1       	ldi	r24, 0x1F	; 31
 446:	9e e4       	ldi	r25, 0x4E	; 78
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x6e>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x74>
 44e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 458:	8f e1       	ldi	r24, 0x1F	; 31
 45a:	9e e4       	ldi	r25, 0x4E	; 78
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x82>
 460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_init+0x88>
 462:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 464:	66 e0       	ldi	r22, 0x06	; 6
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	9e e4       	ldi	r25, 0x4E	; 78
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <lcd_init+0x96>
 474:	00 c0       	rjmp	.+0      	; 0x476 <lcd_init+0x9c>
 476:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 478:	6c e0       	ldi	r22, 0x0C	; 12
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 480:	8f e1       	ldi	r24, 0x1F	; 31
 482:	9e e4       	ldi	r25, 0x4E	; 78
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <lcd_init+0xaa>
 488:	00 c0       	rjmp	.+0      	; 0x48a <lcd_init+0xb0>
 48a:	00 00       	nop
 48c:	08 95       	ret

0000048e <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 48e:	8f 92       	push	r8
 490:	9f 92       	push	r9
 492:	af 92       	push	r10
 494:	bf 92       	push	r11
 496:	cf 92       	push	r12
 498:	df 92       	push	r13
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	69 97       	sbiw	r28, 0x19	; 25
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	f4 2e       	mov	r15, r20
 4b8:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 4ba:	00 23       	and	r16, r16
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 4be:	4b 01       	movw	r8, r22
 4c0:	5c 01       	movw	r10, r24
 4c2:	88 24       	eor	r8, r8
 4c4:	b7 fc       	sbrc	r11, 7
 4c6:	83 94       	inc	r8
 4c8:	99 24       	eor	r9, r9
 4ca:	aa 24       	eor	r10, r10
 4cc:	bb 24       	eor	r11, r11
 4ce:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 4d0:	97 fd       	sbrc	r25, 7
 4d2:	8f c0       	rjmp	.+286    	; 0x5f2 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 4d4:	11 23       	and	r17, r17
 4d6:	09 f4       	brne	.+2      	; 0x4da <lcd_int32+0x4c>
 4d8:	84 c0       	rjmp	.+264    	; 0x5e2 <lcd_int32+0x154>
 4da:	9e 01       	movw	r18, r28
 4dc:	2f 5f       	subi	r18, 0xFF	; 255
 4de:	3f 4f       	sbci	r19, 0xFF	; 255
 4e0:	69 01       	movw	r12, r18
 4e2:	59 01       	movw	r10, r18
 4e4:	88 24       	eor	r8, r8
 4e6:	8a 94       	dec	r8
 4e8:	81 0e       	add	r8, r17
 4ea:	91 2c       	mov	r9, r1
 4ec:	3f ef       	ldi	r19, 0xFF	; 255
 4ee:	83 1a       	sub	r8, r19
 4f0:	93 0a       	sbc	r9, r19
 4f2:	8c 0c       	add	r8, r12
 4f4:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 4f6:	2a e0       	ldi	r18, 0x0A	; 10
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divmodsi4>
 502:	e6 2f       	mov	r30, r22
 504:	2a 8b       	std	Y+18, r18	; 0x12
 506:	3b 8b       	std	Y+19, r19	; 0x13
 508:	4c 8b       	std	Y+20, r20	; 0x14
 50a:	5d 8b       	std	Y+21, r21	; 0x15
 50c:	6a 89       	ldd	r22, Y+18	; 0x12
 50e:	7b 89       	ldd	r23, Y+19	; 0x13
 510:	8c 89       	ldd	r24, Y+20	; 0x14
 512:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 514:	20 e3       	ldi	r18, 0x30	; 48
 516:	2e 0f       	add	r18, r30
 518:	f5 01       	movw	r30, r10
 51a:	21 93       	st	Z+, r18
 51c:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 51e:	e8 15       	cp	r30, r8
 520:	f9 05       	cpc	r31, r9
 522:	49 f7       	brne	.-46     	; 0x4f6 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 524:	bb 24       	eor	r11, r11
 526:	b3 94       	inc	r11
 528:	b1 0e       	add	r11, r17
 52a:	f6 01       	movw	r30, r12
 52c:	e1 0f       	add	r30, r17
 52e:	f1 1d       	adc	r31, r1
 530:	2e e2       	ldi	r18, 0x2E	; 46
 532:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 534:	2a e0       	ldi	r18, 0x0A	; 10
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divmodsi4>
 540:	e6 2f       	mov	r30, r22
 542:	2a 8b       	std	Y+18, r18	; 0x12
 544:	3b 8b       	std	Y+19, r19	; 0x13
 546:	4c 8b       	std	Y+20, r20	; 0x14
 548:	5d 8b       	std	Y+21, r21	; 0x15
 54a:	6e 8b       	std	Y+22, r22	; 0x16
 54c:	7f 8b       	std	Y+23, r23	; 0x17
 54e:	88 8f       	std	Y+24, r24	; 0x18
 550:	99 8f       	std	Y+25, r25	; 0x19
 552:	6a 89       	ldd	r22, Y+18	; 0x12
 554:	7b 89       	ldd	r23, Y+19	; 0x13
 556:	8c 89       	ldd	r24, Y+20	; 0x14
 558:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 55a:	11 e0       	ldi	r17, 0x01	; 1
 55c:	1b 0d       	add	r17, r11
 55e:	d6 01       	movw	r26, r12
 560:	ab 0d       	add	r26, r11
 562:	b1 1d       	adc	r27, r1
 564:	e0 5d       	subi	r30, 0xD0	; 208
 566:	ec 93       	st	X, r30
 568:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 56a:	61 15       	cp	r22, r1
 56c:	71 05       	cpc	r23, r1
 56e:	81 05       	cpc	r24, r1
 570:	91 05       	cpc	r25, r1
 572:	01 f7       	brne	.-64     	; 0x534 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 574:	ff 20       	and	r15, r15
 576:	61 f0       	breq	.+24     	; 0x590 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 578:	e1 10       	cpse	r14, r1
 57a:	39 c0       	rjmp	.+114    	; 0x5ee <lcd_int32+0x160>
 57c:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 57e:	1f 15       	cp	r17, r15
 580:	38 f4       	brcc	.+14     	; 0x590 <lcd_int32+0x102>
 582:	f6 01       	movw	r30, r12
 584:	e1 0f       	add	r30, r17
 586:	f1 1d       	adc	r31, r1
 588:	80 83       	st	Z, r24
 58a:	1f 5f       	subi	r17, 0xFF	; 255
 58c:	1f 11       	cpse	r17, r15
 58e:	f9 cf       	rjmp	.-14     	; 0x582 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 590:	00 23       	and	r16, r16
 592:	31 f0       	breq	.+12     	; 0x5a0 <lcd_int32+0x112>
 594:	f6 01       	movw	r30, r12
 596:	e1 0f       	add	r30, r17
 598:	f1 1d       	adc	r31, r1
 59a:	8d e2       	ldi	r24, 0x2D	; 45
 59c:	80 83       	st	Z, r24
 59e:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 5a0:	11 50       	subi	r17, 0x01	; 1
 5a2:	f6 01       	movw	r30, r12
 5a4:	e1 0f       	add	r30, r17
 5a6:	f1 1d       	adc	r31, r1
 5a8:	60 81       	ld	r22, Z
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b0:	35 ed       	ldi	r19, 0xD5	; 213
 5b2:	3a 95       	dec	r19
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd_int32+0x124>
 5b6:	00 00       	nop
 5b8:	11 11       	cpse	r17, r1
 5ba:	f2 cf       	rjmp	.-28     	; 0x5a0 <lcd_int32+0x112>

}
 5bc:	69 96       	adiw	r28, 0x19	; 25
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	ff 90       	pop	r15
 5d2:	ef 90       	pop	r14
 5d4:	df 90       	pop	r13
 5d6:	cf 90       	pop	r12
 5d8:	bf 90       	pop	r11
 5da:	af 90       	pop	r10
 5dc:	9f 90       	pop	r9
 5de:	8f 90       	pop	r8
 5e0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 5e2:	b1 2c       	mov	r11, r1
 5e4:	9e 01       	movw	r18, r28
 5e6:	2f 5f       	subi	r18, 0xFF	; 255
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	69 01       	movw	r12, r18
 5ec:	a3 cf       	rjmp	.-186    	; 0x534 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 5ee:	80 e3       	ldi	r24, 0x30	; 48
 5f0:	c6 cf       	rjmp	.-116    	; 0x57e <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 5f2:	90 95       	com	r25
 5f4:	80 95       	com	r24
 5f6:	70 95       	com	r23
 5f8:	61 95       	neg	r22
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	69 cf       	rjmp	.-302    	; 0x4d4 <lcd_int32+0x46>

00000602 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 602:	5f 92       	push	r5
 604:	6f 92       	push	r6
 606:	7f 92       	push	r7
 608:	8f 92       	push	r8
 60a:	9f 92       	push	r9
 60c:	af 92       	push	r10
 60e:	bf 92       	push	r11
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	61 97       	sbiw	r28, 0x11	; 17
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	a6 2e       	mov	r10, r22
 632:	54 2e       	mov	r5, r20
 634:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 636:	79 2e       	mov	r7, r25
 638:	77 1c       	adc	r7, r7
 63a:	77 24       	eor	r7, r7
 63c:	77 1c       	adc	r7, r7
 63e:	b7 2c       	mov	r11, r7
 640:	c7 2c       	mov	r12, r7
 642:	d1 2c       	mov	r13, r1
 644:	ee 27       	eor	r30, r30
 646:	ff 27       	eor	r31, r31
 648:	ec 19       	sub	r30, r12
 64a:	fd 09       	sbc	r31, r13
 64c:	8e 27       	eor	r24, r30
 64e:	9f 27       	eor	r25, r31
 650:	fc 01       	movw	r30, r24
 652:	ec 0d       	add	r30, r12
 654:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 656:	44 23       	and	r20, r20
 658:	09 f4       	brne	.+2      	; 0x65c <lcd_int16+0x5a>
 65a:	8e c0       	rjmp	.+284    	; 0x778 <lcd_int16+0x176>
 65c:	ce 01       	movw	r24, r28
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	7c 01       	movw	r14, r24
 662:	8c 01       	movw	r16, r24
 664:	88 24       	eor	r8, r8
 666:	8a 94       	dec	r8
 668:	84 0e       	add	r8, r20
 66a:	91 2c       	mov	r9, r1
 66c:	9f ef       	ldi	r25, 0xFF	; 255
 66e:	89 1a       	sub	r8, r25
 670:	99 0a       	sbc	r9, r25
 672:	8e 0c       	add	r8, r14
 674:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 676:	6a e0       	ldi	r22, 0x0A	; 10
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	cf 01       	movw	r24, r30
 67c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divmodhi4>
 680:	26 2f       	mov	r18, r22
 682:	e2 2f       	mov	r30, r18
 684:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
 686:	80 5d       	subi	r24, 0xD0	; 208
 688:	d8 01       	movw	r26, r16
 68a:	8d 93       	st	X+, r24
 68c:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 68e:	a8 15       	cp	r26, r8
 690:	b9 05       	cpc	r27, r9
 692:	89 f7       	brne	.-30     	; 0x676 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 694:	01 e0       	ldi	r16, 0x01	; 1
 696:	05 0d       	add	r16, r5
 698:	d7 01       	movw	r26, r14
 69a:	a5 0d       	add	r26, r5
 69c:	b1 1d       	adc	r27, r1
 69e:	8e e2       	ldi	r24, 0x2E	; 46
 6a0:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 6a2:	6a e0       	ldi	r22, 0x0A	; 10
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	cf 01       	movw	r24, r30
 6a8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divmodhi4>
 6ac:	26 2f       	mov	r18, r22
 6ae:	e2 2f       	mov	r30, r18
 6b0:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
 6b2:	11 e0       	ldi	r17, 0x01	; 1
 6b4:	10 0f       	add	r17, r16
 6b6:	d7 01       	movw	r26, r14
 6b8:	a0 0f       	add	r26, r16
 6ba:	b1 1d       	adc	r27, r1
 6bc:	80 5d       	subi	r24, 0xD0	; 208
 6be:	8c 93       	st	X, r24
 6c0:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
 6c2:	30 97       	sbiw	r30, 0x00	; 0
 6c4:	71 f7       	brne	.-36     	; 0x6a2 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 6c6:	61 10       	cpse	r6, r1
 6c8:	15 c0       	rjmp	.+42     	; 0x6f4 <lcd_int16+0xf2>
 6ca:	77 20       	and	r7, r7
 6cc:	39 f0       	breq	.+14     	; 0x6dc <lcd_int16+0xda>
        {
                sline[i++] = '-';
 6ce:	11 e0       	ldi	r17, 0x01	; 1
 6d0:	10 0f       	add	r17, r16
 6d2:	f7 01       	movw	r30, r14
 6d4:	e0 0f       	add	r30, r16
 6d6:	f1 1d       	adc	r31, r1
 6d8:	8d e2       	ldi	r24, 0x2D	; 45
 6da:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 6dc:	aa 20       	and	r10, r10
 6de:	41 f1       	breq	.+80     	; 0x730 <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 6e0:	81 2f       	mov	r24, r17
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2a 2d       	mov	r18, r10
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	82 17       	cp	r24, r18
 6ea:	93 07       	cpc	r25, r19
 6ec:	0c f5       	brge	.+66     	; 0x730 <lcd_int16+0x12e>
 6ee:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 6f0:	40 e2       	ldi	r20, 0x20	; 32
 6f2:	0c c0       	rjmp	.+24     	; 0x70c <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 6f4:	aa 20       	and	r10, r10
 6f6:	a1 f0       	breq	.+40     	; 0x720 <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 6f8:	81 2f       	mov	r24, r17
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	2a 2d       	mov	r18, r10
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	2c 19       	sub	r18, r12
 702:	3d 09       	sbc	r19, r13
 704:	82 17       	cp	r24, r18
 706:	93 07       	cpc	r25, r19
 708:	5c f4       	brge	.+22     	; 0x720 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 70a:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 70c:	1f 5f       	subi	r17, 0xFF	; 255
 70e:	f7 01       	movw	r30, r14
 710:	e8 0f       	add	r30, r24
 712:	f9 1f       	adc	r31, r25
 714:	40 83       	st	Z, r20
 716:	81 2f       	mov	r24, r17
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	82 17       	cp	r24, r18
 71c:	93 07       	cpc	r25, r19
 71e:	b4 f3       	brlt	.-20     	; 0x70c <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 720:	bb 20       	and	r11, r11
 722:	31 f0       	breq	.+12     	; 0x730 <lcd_int16+0x12e>
 724:	f7 01       	movw	r30, r14
 726:	e1 0f       	add	r30, r17
 728:	f1 1d       	adc	r31, r1
 72a:	8d e2       	ldi	r24, 0x2D	; 45
 72c:	80 83       	st	Z, r24
 72e:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 730:	11 50       	subi	r17, 0x01	; 1
 732:	f7 01       	movw	r30, r14
 734:	e1 0f       	add	r30, r17
 736:	f1 1d       	adc	r31, r1
 738:	60 81       	ld	r22, Z
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	0e 94 b3 00 	call	0x166	; 0x166 <send_lcd>
 740:	95 ed       	ldi	r25, 0xD5	; 213
 742:	9a 95       	dec	r25
 744:	f1 f7       	brne	.-4      	; 0x742 <lcd_int16+0x140>
 746:	00 00       	nop
 748:	11 11       	cpse	r17, r1
 74a:	f2 cf       	rjmp	.-28     	; 0x730 <lcd_int16+0x12e>
}
 74c:	61 96       	adiw	r28, 0x11	; 17
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	ff 90       	pop	r15
 762:	ef 90       	pop	r14
 764:	df 90       	pop	r13
 766:	cf 90       	pop	r12
 768:	bf 90       	pop	r11
 76a:	af 90       	pop	r10
 76c:	9f 90       	pop	r9
 76e:	8f 90       	pop	r8
 770:	7f 90       	pop	r7
 772:	6f 90       	pop	r6
 774:	5f 90       	pop	r5
 776:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 778:	00 e0       	ldi	r16, 0x00	; 0
 77a:	ce 01       	movw	r24, r28
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	7c 01       	movw	r14, r24
 780:	90 cf       	rjmp	.-224    	; 0x6a2 <lcd_int16+0xa0>

00000782 <lm73_temp_convert>:

volatile uint8_t lm73_wr_buf[2];
volatile uint8_t lm73_rd_buf[2];

//******************************************************************************** 
uint8_t  lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
 782:	9b 01       	movw	r18, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 784:	4a e0       	ldi	r20, 0x0A	; 10
 786:	bc 01       	movw	r22, r24
 788:	c9 01       	movw	r24, r18
 78a:	88 0f       	add	r24, r24
 78c:	89 2f       	mov	r24, r25
 78e:	88 1f       	adc	r24, r24
 790:	99 0b       	sbc	r25, r25
 792:	0e 94 48 05 	call	0xa90	; 0xa90 <__itoa_ncheck>


    itoa(signedInt, temp_digits, 10);

    return 0;
}
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	08 95       	ret

0000079a <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	0b b6       	in	r0, 0x3b	; 59
 7a6:	0f 92       	push	r0
 7a8:	2f 93       	push	r18
 7aa:	3f 93       	push	r19
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 7b8:	e0 91 71 00 	lds	r30, 0x0071
 7bc:	8e 2f       	mov	r24, r30
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	38 97       	sbiw	r30, 0x08	; 8
 7c4:	e1 35       	cpi	r30, 0x51	; 81
 7c6:	f1 05       	cpc	r31, r1
 7c8:	b0 f0       	brcs	.+44     	; 0x7f6 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 7ca:	80 91 71 00 	lds	r24, 0x0071
 7ce:	80 93 37 01 	sts	0x0137, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 7d8:	ff 91       	pop	r31
 7da:	ef 91       	pop	r30
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	3f 91       	pop	r19
 7e6:	2f 91       	pop	r18
 7e8:	0f 90       	pop	r0
 7ea:	0b be       	out	0x3b, r0	; 59
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 7f6:	ea 5b       	subi	r30, 0xBA	; 186
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 7fe:	80 91 01 01 	lds	r24, 0x0101
 802:	e0 91 38 01 	lds	r30, 0x0138
 806:	f0 91 39 01 	lds	r31, 0x0139
 80a:	e8 0f       	add	r30, r24
 80c:	f1 1d       	adc	r31, r1
 80e:	80 91 73 00 	lds	r24, 0x0073
 812:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 814:	84 e9       	ldi	r24, 0x94	; 148
 816:	80 93 74 00 	sts	0x0074, r24
      break;      
 81a:	de cf       	rjmp	.-68     	; 0x7d8 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 81c:	80 91 3a 01 	lds	r24, 0x013A
 820:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 824:	10 92 01 01 	sts	0x0101, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 828:	85 e8       	ldi	r24, 0x85	; 133
 82a:	80 93 74 00 	sts	0x0074, r24
      break;
 82e:	d4 cf       	rjmp	.-88     	; 0x7d8 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 830:	80 91 01 01 	lds	r24, 0x0101
 834:	90 91 3b 01 	lds	r25, 0x013B
 838:	89 17       	cp	r24, r25
 83a:	60 f7       	brcc	.-40     	; 0x814 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 83c:	e0 91 38 01 	lds	r30, 0x0138
 840:	f0 91 39 01 	lds	r31, 0x0139
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	98 0f       	add	r25, r24
 848:	90 93 01 01 	sts	0x0101, r25
 84c:	e8 0f       	add	r30, r24
 84e:	f1 1d       	adc	r31, r1
 850:	80 81       	ld	r24, Z
 852:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 856:	85 e8       	ldi	r24, 0x85	; 133
 858:	80 93 74 00 	sts	0x0074, r24
 85c:	bd cf       	rjmp	.-134    	; 0x7d8 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 85e:	85 ea       	ldi	r24, 0xA5	; 165
 860:	80 93 74 00 	sts	0x0074, r24
      break;
 864:	b9 cf       	rjmp	.-142    	; 0x7d8 <__vector_33+0x3e>
 866:	20 91 01 01 	lds	r18, 0x0101
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 86a:	80 91 3b 01 	lds	r24, 0x013B
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	28 17       	cp	r18, r24
 876:	39 07       	cpc	r19, r25
 878:	dc f4       	brge	.+54     	; 0x8b0 <__vector_33+0x116>
 87a:	85 ec       	ldi	r24, 0xC5	; 197
 87c:	80 93 74 00 	sts	0x0074, r24
 880:	ab cf       	rjmp	.-170    	; 0x7d8 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 882:	e0 91 38 01 	lds	r30, 0x0138
 886:	f0 91 39 01 	lds	r31, 0x0139
 88a:	80 91 01 01 	lds	r24, 0x0101
 88e:	21 e0       	ldi	r18, 0x01	; 1
 890:	28 0f       	add	r18, r24
 892:	20 93 01 01 	sts	0x0101, r18
 896:	e8 0f       	add	r30, r24
 898:	f1 1d       	adc	r31, r1
 89a:	80 91 73 00 	lds	r24, 0x0073
 89e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 8a0:	80 91 3b 01 	lds	r24, 0x013B
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	01 97       	sbiw	r24, 0x01	; 1
 8aa:	28 17       	cp	r18, r24
 8ac:	39 07       	cpc	r19, r25
 8ae:	2c f3       	brlt	.-54     	; 0x87a <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 8b0:	85 e8       	ldi	r24, 0x85	; 133
 8b2:	80 93 74 00 	sts	0x0074, r24
 8b6:	90 cf       	rjmp	.-224    	; 0x7d8 <__vector_33+0x3e>

000008b8 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 8b8:	80 91 74 00 	lds	r24, 0x0074
}
 8bc:	81 70       	andi	r24, 0x01	; 1
 8be:	08 95       	ret

000008c0 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 8c0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 8c4:	90 fd       	sbrc	r25, 0
 8c6:	fc cf       	rjmp	.-8      	; 0x8c0 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 8c8:	8e 7f       	andi	r24, 0xFE	; 254
 8ca:	80 93 3a 01 	sts	0x013A, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 8ce:	70 93 39 01 	sts	0x0139, r23
 8d2:	60 93 38 01 	sts	0x0138, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 8d6:	40 93 3b 01 	sts	0x013B, r20
  TWCR = TWCR_START;                    //initiate START
 8da:	85 ea       	ldi	r24, 0xA5	; 165
 8dc:	80 93 74 00 	sts	0x0074, r24
 8e0:	08 95       	ret

000008e2 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 8e2:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 8e6:	90 fd       	sbrc	r25, 0
 8e8:	fc cf       	rjmp	.-8      	; 0x8e2 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	80 93 3a 01 	sts	0x013A, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 8f0:	70 93 39 01 	sts	0x0139, r23
 8f4:	60 93 38 01 	sts	0x0138, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 8f8:	40 93 3b 01 	sts	0x013B, r20
  TWCR = TWCR_START;                   //initiate START
 8fc:	85 ea       	ldi	r24, 0xA5	; 165
 8fe:	80 93 74 00 	sts	0x0074, r24
 902:	08 95       	ret

00000904 <init_twi>:
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	80 93 73 00 	sts	0x0073, r24
 90a:	10 92 71 00 	sts	0x0071, r1
 90e:	8c e0       	ldi	r24, 0x0C	; 12
 910:	80 93 70 00 	sts	0x0070, r24
 914:	08 95       	ret

00000916 <main>:

/***********************************************************************/
/*                                main                                 */
/***********************************************************************/
int main ()
{     
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	00 d0       	rcall	.+0      	; 0x91c <main+0x6>
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 920:	87 b3       	in	r24, 0x17	; 23
 922:	87 60       	ori	r24, 0x07	; 7
 924:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR=(1<<SPE) | (1<<MSTR); 
 926:	80 e5       	ldi	r24, 0x50	; 80
 928:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	8e b9       	out	0x0e, r24	; 14
    //uint8_t tempNum[1] = {0};
    char tempChar[2];
    const uint8_t address = 0b01001001;

    spi_init(); //initalize SPI 
    lcd_init(); //initalize LCD (lcd_functions.h)
 92e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_init>
    clear_display(); //initalize TWI (twi_master.h)  
 932:	0e 94 98 01 	call	0x330	; 0x330 <clear_display>

    sei();           //enable interrupts before entering loop
 936:	78 94       	sei

    //set LM73 mode for reading temperature by loading pointer register
    lm73_wr_buf[0] = address; //load lm73_wr_buf[0] with temperature pointer address
 938:	89 e4       	ldi	r24, 0x49	; 73
 93a:	80 93 33 01 	sts	0x0133, r24
    twi_start_wr(0x90, lm73_wr_buf, 2); //start the TWI write process
 93e:	42 e0       	ldi	r20, 0x02	; 2
 940:	63 e3       	ldi	r22, 0x33	; 51
 942:	71 e0       	ldi	r23, 0x01	; 1
 944:	80 e9       	ldi	r24, 0x90	; 144
 946:	0e 94 60 04 	call	0x8c0	; 0x8c0 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 94a:	8f e3       	ldi	r24, 0x3F	; 63
 94c:	9f e1       	ldi	r25, 0x1F	; 31
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <main+0x38>
 952:	00 c0       	rjmp	.+0      	; 0x954 <main+0x3e>
 954:	00 00       	nop
    _delay_ms(2);    //wait for the xfer to finish

    clear_display(); //clean up the display
 956:	0e 94 98 01 	call	0x330	; 0x330 <clear_display>
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	21 ee       	ldi	r18, 0xE1	; 225
 95e:	84 e0       	ldi	r24, 0x04	; 4
 960:	91 50       	subi	r25, 0x01	; 1
 962:	20 40       	sbci	r18, 0x00	; 0
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	e1 f7       	brne	.-8      	; 0x960 <main+0x4a>
 968:	00 c0       	rjmp	.+0      	; 0x96a <main+0x54>
 96a:	00 00       	nop

    while(1){          //main while loop
        _delay_ms(100); //tenth second wait
        clear_display();                  //wipe the display
 96c:	0e 94 98 01 	call	0x330	; 0x330 <clear_display>
        twi_start_rd(0x90,lm73_rd_buf,2); //read temperature data from LM73 (2 bytes) 
 970:	42 e0       	ldi	r20, 0x02	; 2
 972:	65 e3       	ldi	r22, 0x35	; 53
 974:	71 e0       	ldi	r23, 0x01	; 1
 976:	80 e9       	ldi	r24, 0x90	; 144
 978:	0e 94 71 04 	call	0x8e2	; 0x8e2 <twi_start_rd>
 97c:	8f e3       	ldi	r24, 0x3F	; 63
 97e:	9f e1       	ldi	r25, 0x1F	; 31
 980:	01 97       	sbiw	r24, 0x01	; 1
 982:	f1 f7       	brne	.-4      	; 0x980 <main+0x6a>
 984:	00 c0       	rjmp	.+0      	; 0x986 <main+0x70>
 986:	00 00       	nop
        _delay_ms(2);    //wait for it to finish
        lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
 988:	60 91 35 01 	lds	r22, 0x0135
 98c:	70 e0       	ldi	r23, 0x00	; 0
        lm73_temp = lm73_temp << 8; //shift it into upper byte 
 98e:	76 2f       	mov	r23, r22
 990:	66 27       	eor	r22, r22
        lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
 992:	80 91 36 01 	lds	r24, 0x0136
 996:	68 2b       	or	r22, r24
        lm73_temp_convert(tempChar, lm73_temp,1 ); //convert to string in array with itoa() from avr-libc                           
 998:	41 e0       	ldi	r20, 0x01	; 1
 99a:	ce 01       	movw	r24, r28
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	0e 94 c1 03 	call	0x782	; 0x782 <lm73_temp_convert>
        string2lcd(tempChar); //send the string to LCD (lcd_functions)
 9a2:	ce 01       	movw	r24, r28
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	0e 94 c8 01 	call	0x390	; 0x390 <string2lcd>
} //while
 9aa:	d7 cf       	rjmp	.-82     	; 0x95a <main+0x44>

000009ac <__divmodhi4>:
 9ac:	97 fb       	bst	r25, 7
 9ae:	07 2e       	mov	r0, r23
 9b0:	16 f4       	brtc	.+4      	; 0x9b6 <__divmodhi4+0xa>
 9b2:	00 94       	com	r0
 9b4:	07 d0       	rcall	.+14     	; 0x9c4 <__divmodhi4_neg1>
 9b6:	77 fd       	sbrc	r23, 7
 9b8:	09 d0       	rcall	.+18     	; 0x9cc <__divmodhi4_neg2>
 9ba:	0e 94 12 05 	call	0xa24	; 0xa24 <__udivmodhi4>
 9be:	07 fc       	sbrc	r0, 7
 9c0:	05 d0       	rcall	.+10     	; 0x9cc <__divmodhi4_neg2>
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__divmodhi4_exit>

000009c4 <__divmodhi4_neg1>:
 9c4:	90 95       	com	r25
 9c6:	81 95       	neg	r24
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__divmodhi4_neg2>:
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255

000009d2 <__divmodhi4_exit>:
 9d2:	08 95       	ret

000009d4 <__divmodsi4>:
 9d4:	05 2e       	mov	r0, r21
 9d6:	97 fb       	bst	r25, 7
 9d8:	1e f4       	brtc	.+6      	; 0x9e0 <__divmodsi4+0xc>
 9da:	00 94       	com	r0
 9dc:	0e 94 01 05 	call	0xa02	; 0xa02 <__negsi2>
 9e0:	57 fd       	sbrc	r21, 7
 9e2:	07 d0       	rcall	.+14     	; 0x9f2 <__divmodsi4_neg2>
 9e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__udivmodsi4>
 9e8:	07 fc       	sbrc	r0, 7
 9ea:	03 d0       	rcall	.+6      	; 0x9f2 <__divmodsi4_neg2>
 9ec:	4e f4       	brtc	.+18     	; 0xa00 <__divmodsi4_exit>
 9ee:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__negsi2>

000009f2 <__divmodsi4_neg2>:
 9f2:	50 95       	com	r21
 9f4:	40 95       	com	r20
 9f6:	30 95       	com	r19
 9f8:	21 95       	neg	r18
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	4f 4f       	sbci	r20, 0xFF	; 255
 9fe:	5f 4f       	sbci	r21, 0xFF	; 255

00000a00 <__divmodsi4_exit>:
 a00:	08 95       	ret

00000a02 <__negsi2>:
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <__tablejump2__>:
 a12:	ee 0f       	add	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	00 24       	eor	r0, r0
 a18:	00 1c       	adc	r0, r0
 a1a:	0b be       	out	0x3b, r0	; 59
 a1c:	07 90       	elpm	r0, Z+
 a1e:	f6 91       	elpm	r31, Z
 a20:	e0 2d       	mov	r30, r0
 a22:	09 94       	ijmp

00000a24 <__udivmodhi4>:
 a24:	aa 1b       	sub	r26, r26
 a26:	bb 1b       	sub	r27, r27
 a28:	51 e1       	ldi	r21, 0x11	; 17
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <__udivmodhi4_ep>

00000a2c <__udivmodhi4_loop>:
 a2c:	aa 1f       	adc	r26, r26
 a2e:	bb 1f       	adc	r27, r27
 a30:	a6 17       	cp	r26, r22
 a32:	b7 07       	cpc	r27, r23
 a34:	10 f0       	brcs	.+4      	; 0xa3a <__udivmodhi4_ep>
 a36:	a6 1b       	sub	r26, r22
 a38:	b7 0b       	sbc	r27, r23

00000a3a <__udivmodhi4_ep>:
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	5a 95       	dec	r21
 a40:	a9 f7       	brne	.-22     	; 0xa2c <__udivmodhi4_loop>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	bc 01       	movw	r22, r24
 a48:	cd 01       	movw	r24, r26
 a4a:	08 95       	ret

00000a4c <__udivmodsi4>:
 a4c:	a1 e2       	ldi	r26, 0x21	; 33
 a4e:	1a 2e       	mov	r1, r26
 a50:	aa 1b       	sub	r26, r26
 a52:	bb 1b       	sub	r27, r27
 a54:	fd 01       	movw	r30, r26
 a56:	0d c0       	rjmp	.+26     	; 0xa72 <__udivmodsi4_ep>

00000a58 <__udivmodsi4_loop>:
 a58:	aa 1f       	adc	r26, r26
 a5a:	bb 1f       	adc	r27, r27
 a5c:	ee 1f       	adc	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	a2 17       	cp	r26, r18
 a62:	b3 07       	cpc	r27, r19
 a64:	e4 07       	cpc	r30, r20
 a66:	f5 07       	cpc	r31, r21
 a68:	20 f0       	brcs	.+8      	; 0xa72 <__udivmodsi4_ep>
 a6a:	a2 1b       	sub	r26, r18
 a6c:	b3 0b       	sbc	r27, r19
 a6e:	e4 0b       	sbc	r30, r20
 a70:	f5 0b       	sbc	r31, r21

00000a72 <__udivmodsi4_ep>:
 a72:	66 1f       	adc	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	99 1f       	adc	r25, r25
 a7a:	1a 94       	dec	r1
 a7c:	69 f7       	brne	.-38     	; 0xa58 <__udivmodsi4_loop>
 a7e:	60 95       	com	r22
 a80:	70 95       	com	r23
 a82:	80 95       	com	r24
 a84:	90 95       	com	r25
 a86:	9b 01       	movw	r18, r22
 a88:	ac 01       	movw	r20, r24
 a8a:	bd 01       	movw	r22, r26
 a8c:	cf 01       	movw	r24, r30
 a8e:	08 95       	ret

00000a90 <__itoa_ncheck>:
 a90:	bb 27       	eor	r27, r27
 a92:	4a 30       	cpi	r20, 0x0A	; 10
 a94:	31 f4       	brne	.+12     	; 0xaa2 <__itoa_ncheck+0x12>
 a96:	99 23       	and	r25, r25
 a98:	22 f4       	brpl	.+8      	; 0xaa2 <__itoa_ncheck+0x12>
 a9a:	bd e2       	ldi	r27, 0x2D	; 45
 a9c:	90 95       	com	r25
 a9e:	81 95       	neg	r24
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__utoa_common>

00000aa6 <__utoa_ncheck>:
 aa6:	bb 27       	eor	r27, r27

00000aa8 <__utoa_common>:
 aa8:	fb 01       	movw	r30, r22
 aaa:	55 27       	eor	r21, r21
 aac:	aa 27       	eor	r26, r26
 aae:	88 0f       	add	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	aa 1f       	adc	r26, r26
 ab4:	a4 17       	cp	r26, r20
 ab6:	10 f0       	brcs	.+4      	; 0xabc <__utoa_common+0x14>
 ab8:	a4 1b       	sub	r26, r20
 aba:	83 95       	inc	r24
 abc:	50 51       	subi	r21, 0x10	; 16
 abe:	b9 f7       	brne	.-18     	; 0xaae <__utoa_common+0x6>
 ac0:	a0 5d       	subi	r26, 0xD0	; 208
 ac2:	aa 33       	cpi	r26, 0x3A	; 58
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__utoa_common+0x20>
 ac6:	a9 5d       	subi	r26, 0xD9	; 217
 ac8:	a1 93       	st	Z+, r26
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	79 f7       	brne	.-34     	; 0xaac <__utoa_common+0x4>
 ace:	b1 11       	cpse	r27, r1
 ad0:	b1 93       	st	Z+, r27
 ad2:	11 92       	st	Z+, r1
 ad4:	cb 01       	movw	r24, r22
 ad6:	0c 94 6d 05 	jmp	0xada	; 0xada <strrev>

00000ada <strrev>:
 ada:	dc 01       	movw	r26, r24
 adc:	fc 01       	movw	r30, r24
 ade:	67 2f       	mov	r22, r23
 ae0:	71 91       	ld	r23, Z+
 ae2:	77 23       	and	r23, r23
 ae4:	e1 f7       	brne	.-8      	; 0xade <strrev+0x4>
 ae6:	32 97       	sbiw	r30, 0x02	; 2
 ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <strrev+0x18>
 aea:	7c 91       	ld	r23, X
 aec:	6d 93       	st	X+, r22
 aee:	70 83       	st	Z, r23
 af0:	62 91       	ld	r22, -Z
 af2:	ae 17       	cp	r26, r30
 af4:	bf 07       	cpc	r27, r31
 af6:	c8 f3       	brcs	.-14     	; 0xaea <strrev+0x10>
 af8:	08 95       	ret

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
