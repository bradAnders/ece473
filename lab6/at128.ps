%!PS-Adobe-3.0
%%Title: lab6.c
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Wed Dec  6 09:17:38 2017
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//  File:     LabFA.c ) c n
(//  Author:   Bradley Anderson) N
(//  Created:  Dec-6, 2017) N
(//  ) N
(//  Collaboration: Kenzie Brian) N
() p n
() N
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h> ) p
(// sprintf) c n
(#include) K
( ") p
(LabFA.h) str
(") p n
(#include) K
( ") p
(hd44780.h) str
(") p n
(#include) K
( ") p
(button7segFunctions.h) str
(") p n
(#include) K
( ") p
(encoderFunctions.h) str
(") p n
(#include) K
( ") p
(lm73_functions.h) str
(") p n
(#include) K
( ") p
(twi_master.h) str
(") p n
(#include) K
( ") p
(uart_functions.h) str
(") p n
(#include) K
( ") p
(si4734.h) str
(") p n
() N
(bool a = TRUE;) N
(bool b = FALSE;) N
() N
(//enum states {DISP_TIME, SET_TIME, ALARM, SNOOZE, SET_ALARM};) c n
(volatile) K
( ) p
(enum) k
( states STATE = DISP_TIME;) p n
() N
(// Variables for ADC) c n
(uint8_t  i;              ) p
(//dummy variable) c n
(uint16_t adc_result;     ) p
(//holds ADC result) c n
() p n
(// TWI interface buffers) c n
(extern) K
( uint8_t lm73_wr_buf[2];) p n
(extern) K
( uint8_t lm73_rd_buf[2];) p n
(const) K
( uint8_t lm73_address_local = 0b10010000;     ) p
(// Model 0, pin floating) c n
() p n
(// Clock hour, minute, second) c n
(volatile) K
( uint8_t clock_s=0;) p n
(volatile) K
( uint8_t clock_m=1;) p n
(volatile) K
( uint8_t clock_h=12;) p n
(volatile) K
( uint8_t alarm_s=0;) p n
(volatile) K
( uint8_t alarm_m=0;) p n
(volatile) K
( uint8_t alarm_h=12;) p n
(volatile) K
( uint8_t snuze_s=0;) p n
(volatile) K
( uint8_t snuze_m=0;) p n
(volatile) K
( uint8_t snuze_h=12;) p n
(uint8_t hours12_24 = 12;) N
(uint8_t am_pm = 0;) N
(uint8_t alarmBeep=0;) N
(uint8_t timeToCheckForRX = 1;) N
(uint8_t timeToSPI = 0;) N
(uint8_t timeTo7Seg = 0;) N
() N
(// Text to be displayed to LCD) c n
(volatile) K
( ) p
(char) k
( *lcdText1 = ") p
(Welcome) str
(";) p n
(volatile) K
( ) p
(char) k
( *lcdText2 = ") p
(Welcome) str
(";) p n
(volatile) K
( ) p
(char) k
( *lcdTextTemp = ") p
(Temperature) str
(";) p n
(volatile) K
( ) p
(char) k
( *lcdTextVolume = ") p
(Volume) str
(";) p n
(volatile) K
( ) p
(char) k
( *uartString = ") p
(UART) str
(";) p n
(volatile) K
( uint8_t volume = 100;) p n
() N
(lab6.c) (Page 1/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// Number displayed to 7seg) c n
(volatile) K
( uint16_t segNum = 0;) p n
() N
(// Number displayed to bargraph) c n
(volatile) K
( uint8_t barNum = 0;) p n
() N
(// Radio variables) c n
(volatile) K
( ) p
(enum) k
( radio_band current_radio_band = FM;) p n
(extern) K
( ) p
(volatile) K
( uint8_t STC_interrupt;) p n
(volatile) K
( uint8_t freqTime=0;) p n
(volatile) K
( uint8_t needToChangeStation = 0;) p n
() N
(uint16_t eeprom_fm_freq;) N
(uint16_t eeprom_am_freq;) N
(uint16_t eeprom_sw_freq;) N
(uint8_t  eeprom_volume;) N
() N
(uint16_t current_fm_freq = 10630;) N
(uint16_t current_am_freq;) N
(uint16_t current_sw_freq;) N
(uint8_t  current_volume;) N
() N
(// Function prototypes) c n
(void) k
( spiTxRx\(\);) p n
(void) k
( spi_init\(\);) p n
(void) k
( timer_init\(\);) p n
(void) k
( digit_init\(\);) p n
(void) k
( update7Seg\(\);) p n
(void) k
( stateSwitcher\(\);) p n
() N
() N
() N
(//****************************************************************************) c n
(//      -- Serial Peripheral Interface Initialization --) N
(//  Modified from Roger Traylor's source file) N
(//****************************************************************************) N
(void) k
( spi_init\() p
(void) k
(\) {) p n
() N
(    ) S
(// -- LCD INIT --) c n
(    ) p
(/* Run this code before attempting to write to the LCD.*/) c
( ) p n
(    DDRF  |= 0x08;  ) S
(//port F bit 3 is enable for LCD) c n
(    PORTF &= 0xF7;  ) p
(//port F bit 3 is initially low) c n
() p n
(    DDRB  |= 0x07;  ) S
(//Turn on SS, MOSI, SCLK) c n
(    PORTB |= _BV\(PB1\);  ) p
(//port B initialization for SPI, SS_n off) c n
(    ) p
(//see: /$install_path/avr/include/avr/iom128.h for bit definitions) c n
() p n
(    ) S
(//Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first) c n
(    SPCR=\(1<<SPE\) | \(1<<MSTR\); ) p
(//enable SPI, clk low initially, rising edge samp) c n
(le) N
(    SPSR=\(1<<SPI2X\);           ) p
(//SPI at 2x speed \(8 MHz\)) c n
() p n
(    ) S
(// -- Bargraph INIT --) c n
(    ) p
(// Direction Registers) c n
(    DDRB |= \(1<<RCLK\) | \(1<<SCLK\) | \(1<<MOSI\) | \(1<<PWM_BRT\);) p n
(    DDRD |= \(1<<SHLD_ENC\) | \(1<<OE_N_BG\);) N
() N
(    ) S
(// SPI Control Register) c n
(    SPCR |= \(1<<SPE\) | \(1<<MSTR\) | \(0<<SPR1\)|\(1<<SPR0\);) p n
() N
(    ) S
(// SPI Status Register) c n
(    SPSR |= \(1<<SPI2X\);) p n
(lab6.c) (Page 2/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (1/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(// SPI Data Register) c n
(    PORTB &= ~\(1<<OE_N_BG\);) p n
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//      -- Transmits and Receives to/from SPI --) N
(//******************************************************************************) N
(void) k
( spiTxRx\(\) {) p n
(    ) S
(static) K
( uint8_t textLine = 0;) p n
() N
(    ) S
(//clear_display\(\);) c n
(    ) p
(if) K
( \(textLine\) {) p n
(        cursor_home\(\);) N
(        string2lcd\(\() S
(char) k
( *\)lcdText1\);  ) p
(//write upper half) c n
(        textLine = 0;) p n
(    } ) S
(else) K
( {) p n
(        home_line2\(\);) N
(        string2lcd\(\() S
(char) k
( *\)lcdText2\);  ) p
(//write upper half) c n
(        textLine = 1;) p n
(    }) N
(    ) S
(//_delay_us\(500\);) c n
() p n
(    ) S
(// Toggle Encoder Shift/Load) c n
(    PORTD &= ~\(1<<SHLD_ENC\);) p n
(    PORTD |= \(1<<SHLD_ENC\);) N
() N
(    ) S
(// SPI write from global variable) c n
(    SPDR = barNum;) p n
() N
(    ) S
(// Wait for 8 clock cycles) c n
(    ) p
(while) K
(\(bit_is_clear\(SPSR, SPIF\)\) {}) p n
() N
(    ) S
(// Save the most recent serial reading into global variable) c n
(    encoderState = SPDR;) p n
() N
(    ) S
(// Toggle Bargraph Register Clock) c n
(    PORTB |= \(1<<RCLK\);) p n
(    PORTB &= ~\(1<<RCLK\);) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//      -- Timer 0 Compare Interrupt --i) N
(// Using the internal 32.768 KHz oscillator to implement a clock) N
(//******************************************************************************) N
(ISR\(TIMER0_OVF_vect\) {) p n
(    ) S
(static) K
( uint8_t clock=0;) p n
(    clock++;) N
() S 8 T () N
(    ) S
(if) K
( \(clock == 128\){) p n
() S 8 T () S 16 T (timeToCheckForRX = 1;) N
(        clock_s++;) N
() S 8 T () S 16 T (freqTime++;) N
(        clock = 0;) N
(    }) N
(    ) S
(if) K
( \(clock_s >= 60\) {) p n
(        clock_s = 0;) N
(        clock_m++;) N
(lab6.c) (Page 3/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    }) p n
(    ) S
(if) K
( \(clock_m >= 60\) {) p n
(        clock_m = 0;) N
(        clock_h++;) N
(    }) N
(    ) S
(if) K
( \(clock_h > hours12_24\) {) p n
(        clock_h -= hours12_24;) N
(        ) S
(if) K
( \(am_pm\)) p n
(            am_pm = 0;) N
(        ) S
(else) K n
(            am_pm = 1;) p n
(    }) N
() N
(    ) S
(if) K
( \(clock % 32 == 0\){) p n
(        alarmBeep = !alarmBeep;) N
(    }) N
(}) S
(//ISR TIMER0_OVF_vect) c n
() p n
() N
() N
(//*****************************************************************************) c n
(//      -- Timer 1 Compare Interrupt: Alarm signal generation -- ) N
(//*****************************************************************************) N
(ISR\(TIMER1_COMPA_vect\) {) p n
() S 8 T (PORTD ^= \(1<<D_BP\);) N
(}) S
(//ISR) c n
() p n
() N
() N
(//*****************************************************************************) c n
(//      -- Timer 2 Compare Interrupt: 7 Segment Brightness PWM -- ) N
(//*****************************************************************************) N
(// NO ISR NEEDED; PWM GOES STRAIGHT TO OUTPUT PIN) N
() p n
() N
() N
(//*****************************************************************************) c n
(//      -- Timer 3 Compare Interrupt: Audio Amp Volume to DAC --) N
(//      -- Also use this as a slower interrupt for various functionality --) N
(//*****************************************************************************) N
(ISR\(TIMER3_OVF_vect\) {) p n
() S 8 T () S
(//static char buffer[17];) c n
() p 8 T () N
() S 8 T () S
(// -- 7 SEG BRIGHTNESS --) c n
() p 8 T () S
(// Read the value of the photo resistor) c n
() p 8 T (readADC\(\);) N
() S 8 T () S
(// Set the brightness of the LCD) c n
() p 8 T (OCR2 = 255- \(adc_result\)/4;) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//      -- TIMER Initialization --) N
(//******************************************************************************) N
(void) k
( timer_init\(\) {) p n
() N
(    ) S
(// Timer counter 0 setup, running off i/o clock) c n
() p n
(    ) S
(// Asynchronous Status Register, pg107) c n
(    ) p
(//    Run off of external clock) c n
(    ASSR  |= \(1<<AS0\);) p n
(lab6.c) (Page 4/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (2/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(// Timer/Counter Interrupt Mask, pg109) c n
(    ) p
(//    Timer 0: overflow interrupt enable) c n
(    TIMSK |= \(1<<TOIE0\) | \(1<<OCIE1A\) | \(1<<OCIE3A\);) p n
(    ETIMSK |= \(1<<TOIE3\);) N
() N
(    ) S
(// Timer/Counter Control Register, pg104) c n
(    ) p
(// Timer 0: 32kHz osc. for internal clock) c n
(    ) p
(//      Normal mode, OC0 disconnected, clkTOS with no prescalar) c n
(    TCCR0 = \(1<<CS00\);) p n
() N
(    ) S
(// Timer 1 init) c n
(    ) p
(// Clear on compare, prescale and value set to give ~5kHz signal) c n
(    TCCR1B |= \(1<<WGM12\) | \(1<<CS11\) | \(1<<CS10\);) p n
(    OCR1A = 0X00EF;) N
() N
(    ) S
(// Timer 2: Phase-corrected PWM for 7 seg brightness, no prescale) c n
(    TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<COM20\) | \(1<<CS20\);) p n
() N
(    ) S
(// Timer 3: PWM for audio volume, but also correct speed for SPI reading) c n
(    ) p
(// CTC mode, Clear on match) c n
(    DDRE = 0xFF;) p n
(    PORTE = 0xFF;) N
(    TCCR3A = \(1<<WGM31\)|\(0<<WGM30\) | \(1<<COM3A1\)|\(0<<COM3A0\);) N
(    TCCR3B = \(0<<WGM33\)|\(1<<WGM32\) | \(1<<CS32\)|\(0<<CS31\)|\(0<<CS30\);) N
(    OCR3A = 70;) N
() N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//      -- Initializes the analog->digital converter --) N
(//******************************************************************************) N
(void) k
( adc_init\(uint8_t pin\) {) p n
() N
(    ) S
(//Initialize ADC and its ports) c n
(    DDRF  &= ~\(_BV\(pin\)\); ) p
(//make port F bit 7 is ADC input) c n
(    PORTF &= ~\(_BV\(pin\)\);  ) p
(//port F bit 7 pull-ups must be off) c n
() p n
(    ) S
(//single-ended, input PORTF bit 7, right adjusted, 10 bits) c n
(    ) p
(// ADC Multiplexer Selection Register) c n
(    ) p
(// Reference Selection = 01: Internal VRef) c n
(    ) p
(// MUX = 00111: ADC7) c n
(    ADMUX |= \(1<<REFS0\) | \(1<<MUX2\)|\(1<<MUX1\)|\(1<<MUX0\);) p n
() N
(    ) S
(//ADC enabled, don't start yet, single shot mode) c n
(    ) p
(// factor is 128 \(125khz\)) c n
(    ) p
(// ADC Control and Status Register A, ADC Enable, ADC Prescalar Selection = ) c n
(128;) N
(    ADCSRA |= \(1<<ADEN\) | \(1<<ADPS2\)|\(1<<ADPS1\)|\(1<<ADPS0\);) p n
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//      -- Update 7 seg with the most recent data --) N
(//******************************************************************************) N
(void) k
( update7Seg\(\) {) p n
() N
(    ) S
(//make PORTA an output) c n
(    DDRA = 0xFF;) p n
(lab6.c) (Page 5/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(//bound a counter \(0-4\) to keep track of digit to display ) c n
(    ) p
(for) K
( \(i=0; i<5; i++\)) p n
(    {) N
(        ) S
(// Clear digit select) c n
(        PORTB &= SELCL;) p n
() N
(        ) S
(//update digit to display) c n
(        PORTB |= digitSelect[i];) p n
() N
(        ) S
(//send 7 segment code to LED segments) c n
(        PORTA = segment_data[i];) p n
() N
() N
(        ) S
(//dimming/flicker correction) c n
(        ) p
(//_delay_ms\(10\);) c n
(        _delay_us\(600\);) p n
(    }) S
(//for) c n
() p n
(    PORTB &= SELCL;) N
(    PORTB |= SELBN;) N
(    PORTB |= digitSelect[2];) N
(    DDRA = 0x00;) N
(} ) S
(// end update7seg) c n
() p n
() N
() N
(//******************************************************************************) c n
(//      -- Read ADC) N
(//******************************************************************************) N
(void) k
( readADC\(\) {) p n
() N
() N
(    ) S
(//poke ADSC and start conversion) c n
(    ) p
(// ADC Control and Status Register A, ADC Start Conversion) c n
(    ADCSRA |= \(1<<ADSC\);) p n
() N
(    ) S
(//spin while interrupt flag not set) c n
(    ) p
(// ADC Control and Status Register A, ADC Interrupt Flag) c n
(    ) p
(while) K
(\(bit_is_clear\(ADCSRA, ADIF\)\) {}) p n
() N
(    ) S
(//its done, clear flag by writing a one ) c n
(    ) p
(// ADC Interrupt Flag) c n
(    ADCSRA |= \(1<<ADIF\);) p n
() N
(    ) S
(//read the ADC output as 16 bits) c n
(    adc_result = ADC;      ) p n
(} ) S
(// end readADC) c n
() p n
() N
() N
(//******************************************************************************) c n
(//      -- Handles State Logic) N
(//******************************************************************************) N
(void) k
( stateSwitcher\(\) {) p n
(    ) S
(//volatile static char buffer[4] = "    ";) c n
(    ) p
(//uint8_t temp = volume;) c n
() p n
(    ) S
(switch) K
( \(buttonState\){) p n
(        ) S
(case) K
( 0b01:) p n
(            STATE = SET_TIME;) N
(            ) S
(break) K
(;) p n
(lab6.c) (Page 6/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (3/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(case) K
( 0b10:) p n
(            STATE = SET_ALARM;) N
(            ) S
(break) K
(;) p n
(        ) S
(case) K
( 0b100:) p n
(            ) S
(if) K
( \(\(STATE == SNOOZE\) || \(STATE == ALARM\)\) {) p n
(                STATE = DISP_TIME;) N
(                buttonState = 0;) N
(                snuze_s = alarm_s;) N
(                snuze_m = alarm_m;) N
(                snuze_h = alarm_h;) N
(            } ) S
(else) K n
(                STATE = ALARM;) p n
(            ) S
(break) K
(;) p n
(        ) S
(default) K
(:) p n
(            ) S
(if) K
( \(STATE == ALARM\) {) p n
(                ) S
(if) K
( \(buttonState != 0\)) p n
(                    STATE = SNOOZE;) N
(                snuze_s = clock_s + 10;) N
(                snuze_m = clock_m;) N
(                snuze_h = clock_h;) N
(            } ) S
(else) K
( {) p n
(                ) S
(if) K
( \(STATE != SNOOZE\) ) p n
(                    STATE = DISP_TIME;) N
(                buttonState = 0;) N
(            }) N
(            ) S
(break) K
(;) p n
(    }) N
() N
(    ) S
(switch) K
( \(STATE\) {) p n
(        ) S
(case) K
( DISP_TIME: ) p
(// Display Time) c n
(            lcdText1 = ") p
(Signal          ) str
(";) p n
(            lcdText2 = lcdTextTemp;) N
() S 8 T () S 16 T () S 24 T () S
(//lcdText2 = "hello           ";) c n
(            ) p
(//strcat\(lcdText2, itoa\(temp, buffer, 10\)\);) c n
(            ) p
(//lcdText2[11] = 0;) c n
(            ) p
(break) K
(;) p n
(        ) S
(case) K
( SET_TIME:) p n
(            lcdText1 = ") S
(Use dials to    ) str
(";) p n
(            lcdText2 = ") S
(change time     ) str
(";) p n
(            ) S
(break) K
(;) p n
(        ) S
(case) K
( ALARM:) p n
(            lcdText1 = ") S
(     ALARM!     ) str
(";) p n
(            lcdText2 = ") S
(   \(Snooze?\)    ) str
(";) p n
(            buttonState = 0;) N
(            ) S
(break) K
(;) p n
(        ) S
(case) K
( SET_ALARM:) p n
(            lcdText1 = ") S
(Use dials to    ) str
(";) p n
(            lcdText2 = ") S
(change alarm    ) str
(";) p n
(            ) S
(break) K
(;) p n
(        ) S
(case) K
( SNOOZE:) p n
(            lcdText1 = ") S
(Snoozing........) str
(";) p n
(            lcdText2 = ") S
(zzZzzZZZzzzZzZZz) str
(";) p n
(            ) S
(break) K
(;) p n
(        ) S
(default) K
(:) p n
(            lcdText1 = ") S
(    Welcome     ) str
(";) p n
(            lcdText2 = ") S
( \(State error\)  ) str
(";) p n
(            ) S
(break) K
(;) p n
(    } ) S
(// end switch) c n
(} ) p
(// end stateSwitcher) c n
() p n
() N
() N
(lab6.c) (Page 7/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//******************************************************************************) c n
(//      -- Transmits and Receives to/from SPI --) N
(//******************************************************************************) N
(void) k
( twiRx\(\) {) p n
() S 8 T () N
() S 8 T (uint16_t lm73_temp_local = 0; ) S
(//  local temperature) c n
() p 8 T () S
(//char tempCharRemote[3] = "??"; //  local temperature) c n
() p 8 T () S
(char) k
( tempCharLocal[3] = ") p
(??) str
(";) p n
() S 8 T () S
(static) K
( ) p
(char) k
( buffer[17];) p n
() S 8 T () N
() S 8 T () S
(if) K
( \(timeToCheckForRX\) {) p n
() S 8 T () S 16 T (timeToCheckForRX = 0;) N
() S 8 T () N
() S 8 T () N
() S 8 T () S 16 T () S
(// -- TWI Read --) c n
() p 8 T () S 16 T (twi_start_rd\(lm73_address_local, lm73_rd_buf, 2\); ) S
(//read tempera) c n
(ture data from LM73 \(2 bytes\)) N
() p 8 T () S 16 T (_delay_ms\(2\);    ) S
(//wait for it to finish) c n
() p 8 T () S 16 T (lm73_temp_local = lm73_rd_buf[0]; ) S
(//save high temperature byte i) c n
(nto lm73_temp) N
() p 8 T () S 16 T (lm73_temp_local = lm73_temp_local << 8; ) S
(//shift it into upper by) c n
(te) N
() p 8 T () S 16 T (lm73_temp_local |= lm73_rd_buf[1]; ) S
(//"OR" in the low temp byte t) c n
(o lm73_temp) N
() p 8 T () S 16 T (lm73_temp_local = lm73_temp_convert\(tempCharLocal, lm73_temp_loc) N
(al, 1\); ) S
(//convert to string in array with itoa\(\) from avr-libc) c n
() p 8 T () S 16 T () N
() S 8 T () N
() S 8 T () S 16 T () S
(//uart_putc\('t'\);) c n
() p 8 T () S 16 T () S
(//_delay_ms\(30\);    //wait for it to finish) c n
() p 8 T () S 16 T () S
(//tempCharRemote[0] = uart_getc\(\);) c n
() p 8 T () S 16 T () S
(//tempCharRemote[0] = 'n';) c n
() p 8 T () S 16 T () S
(//_delay_ms\(2\);    //wait for it to finish) c n
() p 8 T () S 16 T () S
(//tempCharRemote[1] = uart_getc\(\);) c n
() p 8 T () S 16 T () S
(//_delay_ms\(2\);    //wait for it to finish) c n
() p 8 T () S 16 T () S
(//tempCharRemote[2] = '\\0';) c n
() p 8 T () S 16 T () N
() S 8 T () S 16 T (sprintf\(buffer, ") S
(I=%d O=%s) str
(",lm73_temp_local, uartString\);) p n
() S 8 T () S 16 T () N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(// -- VOLUME --) c n
() p 8 T () S 16 T (OCR3A = \(volume<<1\);) N
() S 8 T () S 16 T (current_volume = volume;) N
() S 8 T () S 16 T (sprintf\(buffer,") S
(%s V=%d%%) str
(",lcdTextTemp, \() p
(int) k
(\)\(volume/2.50\)\);) p n
() S 8 T () S 16 T () S
(//sprintf\(buffer,tempCharRemote\);) c n
() p 8 T (}) N
() S 8 T () N
() S 8 T (sprintf\(buffer,") S
(%-16s) str
(",buffer\);) p n
() S 8 T (lcdTextTemp = buffer;) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//) S 8 T () S 16 T (-- Tells UART to start transmitting and then reads two character) N
(s --) N
(//******************************************************************************) N
(void) k
( uartTxRx\(\) {) p n
() S 8 T () S
(static) K
( ) p
(char) k
( buffer[16] = ") p
(no!) str
(";) p n
() S 8 T () S
(//static uint8_t count = 0;) c n
() p 8 T () N
() S 8 T (uart_putc\(') S
(t) str
('\);) p n
(lab6.c) (Page 8/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (4/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (_delay_ms\(3\);    ) S
(//wait for it to finish) c n
() p 8 T () N
() S 8 T () S
(// When nothing to receive, uart_getc returns 0, which is also null char) c n
() p 8 T (buffer[0] = uart_getc\(\);) N
() S 8 T (buffer[1] = uart_getc\(\);) N
() S 8 T (buffer[2] = 0;) N
() S 8 T () S 16 T () N
() S 8 T () S
(//sprintf\(buffer,"%-16s",buffer\);) c n
() p 8 T (uartString = buffer;) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//) S 8 T () S 16 T (-- Checks if alarm should be going off --) N
(//******************************************************************************) N
(void) k
( checkIfAlarm\(\) {) p n
() S 8 T () S
(if) K
( \(STATE != SET_ALARM\) {) p n
() S 8 T () S 16 T () S
(if) K
( \(\(alarm_s + 100*alarm_m + 10000*alarm_h == clock_s + 100*cloc) p n
(k_m + 10000*clock_h\)) N
() S 8 T () S 16 T (|| \(snuze_s + 100*snuze_m + 10000*snuze_h == clock_s + 100*clock) N
(_m + 10000*clock_h\)\)) N
() S 8 T () S 16 T (STATE = ALARM;) N
() N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
( \(alarm_m >= 60\)) p n
() S 8 T (alarm_m = 0;) N
() S 8 T () S
(if) K
( \(alarm_h >= 60\)) p n
() S 8 T (alarm_h = 0;) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//) S 8 T () S 16 T (-- Reads global variables and converts them to 7seg data --) N
(//******************************************************************************) N
(void) k
( diplayTimeToSegment\(\) {) p n
() S 8 T () S
(// -- TIME DISPLAY --) c n
() p n
() S 8 T () S
(// Display the button latch state on the bargraph) c n
() p 8 T (barNum = clock_s;) N
() S 8 T () N
() S 8 T () S
(if) K
( \(freqTime < 4\) {) p n
() S 8 T () S 16 T (segNum = current_fm_freq/10;) N
() S 8 T () S 16 T (segsum\(segNum\);) N
() S 8 T () S 16 T (segment_data[1] &= 0b01111111;) N
() S 8 T (} ) S
(else) K
( {) p n
() S 8 T () S 16 T () S
(// Convert minutes and hours to a number for displaying) c n
() p 8 T () S 16 T () S
(if) K
( \(STATE == SET_ALARM\)) p n
() S 8 T () S 16 T () S 24 T (segNum = alarm_m + 100*alarm_h;) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (segNum = clock_m + 100*clock_h;) N
() N
() S 8 T () N
() S 8 T () S 16 T () S
(// Update number to digitSelect[i]) c n
() p 8 T () S 16 T (segsum\(segNum\);) N
() S 8 T () S 16 T () S
(if) K
( \(am_pm\)) p n
() S 8 T () S 16 T () S 24 T (segment_data[2] &= ~\(1<<COLON3\);) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (segment_data[2] |= \(1<<COLON3\);) N
() N
(lab6.c) (Page 9/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(// colon blink) c n
() p 8 T () S 16 T () S
(switch) K
( \(clock_s % 2\) {) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( 0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(STATE == ALARM\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (segment_data[2] |= \(1<COLON1\) | \(1<<COLO) N
(N2\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( 1:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (segment_data[2] &= ~\(\(1<<COLON1\) | \(1<<COLON2\)\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(default) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
() N
() N
(//******************************************************************************) c n
(//) S 8 T () S 16 T (-- Initializes the radio --) N
(//******************************************************************************) N
(void) k
( radio_init\(\) {) p n
() S 8 T () N
() S 8 T (DDRE = 0xFF;) S 24 T () S 32 T () S
(//PORTE output, low) c n
() p 8 T (PORTE = 0x00;) N
() S 8 T () N
() S 8 T () S
(//DDRE  |= \(1<<RAD_RST\);) c n
() p 8 T (PORTE |= \(1<<RAD_RST\); ) S
(//Radio reset is on at powerup \(active high\)) c n
() p 8 T () S
(//Enable interrupt for radio) c n
() p 8 T (EICRB |= \(1<<ISC71\) | \(0<<ISC70\); ) S
(//GPIO is pull-up; detect falling edge) c n
() p 8 T (EIMSK |= \(1<<INT7\);) N
() S 8 T () N
() S 8 T () S
(// Turn off pull up resistor) c n
() p 8 T (PORTE &= ~\(1<<RAD_INT\);) N
() S 8 T (DDRE |= \(1<<RAD_INT\);) N
() S 8 T () N
() S 8 T () S
(// Toggle reset pin for at least 100us) c n
() p 8 T () S
(//DDRE |= \(1<<RAD_RST\);) c n
() p 8 T (PORTE |= \(1<<RAD_RST\);) N
() S 8 T (_delay_us\(200\);) N
() S 8 T (PORTE &= ~\(1<<RAD_RST\);) N
() S 8 T (_delay_us\(50\);) N
() S 8 T () N
() S 8 T () S
(// Set radio interrupt back to input) c n
() p 8 T (DDRE &= ~\(1<<RAD_INT\);) N
() S 8 T () S
(//PORTE |= \(1<<RAD_INT\); // pull up) c n
(}) p n
() N
() N
() N
(//******************************************************************************) c n
(//) S 8 T () S 16 T (-- Response from radio --) N
(//******************************************************************************) N
(ISR\(INT7_vect\) {STC_interrupt = TRUE;}) p n
() S 8 T () N
() S 8 T () N
() S 8 T () N
(//******************************************************************************) c n
(//                                  main) N
(//  Does main stuff) N
(//******************************************************************************) N
(int) k
( main\() p
(void) k
(\) {) p n
(lab6.c) (Page 10/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (5/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () N
(    digit_init\(\);) N
(    timer_init\(\);) N
(    spi_init\(\);) N
(    lcd_init\(\);) N
() S 8 T (init_twi\(\);) N
(    adc_init\(CDS\);) N
(    clear_display\(\);) N
() S 8 T (uart_init\(\);) N
() S 8 T (radio_init\(\);) N
() S 8 T () N
() S 8 T (sei\(\);) N
() S 8 T () N
() S 8 T () N
() N
() S 8 T () S
(//set LM73 mode for reading temperature by loading pointer register) c n
() p 8 T (lm73_wr_buf[0] = 0x00; ) S
(//load lm73_wr_buf[0] with temperature pointer ad) c n
(dress) N
() p 8 T () N
() S 8 T () S
(// Tell TWI to start writing, number of bytes = 2) c n
() p 8 T (twi_start_wr\(lm73_address_local, lm73_wr_buf, 2\);) N
() S 8 T () N
() S 8 T () S
(// Wait for the transfer to finish) c n
() p 8 T (_delay_ms\(2\);) N
() S 8 T () N
() S 8 T () N
() S 8 T (fm_pwr_up\(\);) N
() S 8 T (current_fm_freq = 10630;) N
() S 8 T (set_property\(0x4001,0x0000\);) N
() S 8 T (fm_tune_freq\(\);) N
() N
(    ) N
() N
(    ) S
(while) K
(\(1\) {) p n
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(if) K
( \(needToChangeStation\) {) p n
() S 8 T () S 16 T () S 24 T (needToChangeStation = 0;) N
() S 8 T () S 16 T () S 24 T (fm_tune_freq\(\);) N
() S 8 T () S 16 T (}) N
(        ) S
(// State Machine Control!) c n
(        stateSwitcher\(\);) p n
() N
(        checkIfAlarm\(\);) N
() N
(     ) N
(        ) S
(// -- READ BUTTONS --) c n
(        toggle_button_bus\(\);) p n
() N
() S 8 T () S 16 T (spiTxRx\(\);) N
() S 8 T () S 16 T (interpret_encoders\(\);) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(// -- UART --) c n
() p 8 T () S 16 T (uartTxRx\(\);) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(// -- TWI --) c n
() p 8 T () S 16 T (twiRx\(\);) N
() N
() S 8 T () S 16 T (diplayTimeToSegment\(\);) N
() N
() S 8 T () S 16 T (update7Seg\(\);) N
(        ) N
(        ) S
(// Alarm Beeping) c n
(lab6.c) (Page 11/12) (Dec 06, 17 9:17) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(if) K
( \(STATE == ALARM\) {) p n
(            ) S
(if) K
( \(alarmBeep\)) p n
(                DDRD |= \(1<<D_BP\);) N
(            ) S
(else) K
(    ) p n
(                DDRD &= ~\(1<<D_BP\);) N
(        } ) S
(else) K
( ) p n
(            DDRD &= ~\(1<<D_BP\);) N
() N
(    }) S
(//while) c n
() p n
(    ) S
(return) K
( 0;) p n
() N
(}) S
(//main) c n
(lab6.c) (Page 12/12) (Dec 06, 17 9:17) title
border
grestore
(Printed by ) rhead
(lab6.c) (6/6) (Wednesday December 06, 2017) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
