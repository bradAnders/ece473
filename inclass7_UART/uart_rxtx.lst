
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a40  00000ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080010c  0080010c  00000ae0  2**0
                  ALLOC
  3 .stab         00002190  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d0  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f54  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3f       	cpi	r26, 0xF5	; 245
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 26 04 	call	0x84c	; 0x84c <main>
  c6:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <__vector_18>:
    send_seq=(send_seq%20);
//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	80 93 24 01 	sts	0x0124, r24
  lcd_str_array[i++]=rx_char;  //store in array 
  fa:	e0 91 0d 01 	lds	r30, 0x010D
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9e 0f       	add	r25, r30
 102:	90 93 0d 01 	sts	0x010D, r25
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 5e       	subi	r30, 0xEC	; 236
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
 10e:	81 11       	cpse	r24, r1
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_18+0x46>
    rcv_rdy=1; 
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 0f 01 	sts	0x010F, r24
    lcd_str_array[--i]  = (' ');     //clear the count field
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
 11c:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
 11e:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
 120:	10 92 0d 01 	sts	0x010D, r1
  }
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <uart_putc>
    UDR0 = data;    // Send data byte
 13e:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <uart_putc+0x6>
}
 144:	08 95       	ret

00000146 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 146:	90 91 9b 00 	lds	r25, 0x009B
 14a:	95 ff       	sbrs	r25, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <uart1_putc>
    UDR1 = data;    // Send data byte
 14e:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 152:	80 91 9b 00 	lds	r24, 0x009B
 156:	85 ff       	sbrs	r24, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <uart1_putc+0xc>
}
 15a:	08 95       	ret

0000015c <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 15c:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 15e:	90 81       	ld	r25, Z
 160:	99 23       	and	r25, r25
 162:	49 f0       	breq	.+18     	; 0x176 <uart_puts+0x1a>
 164:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 16a:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 170:	91 91       	ld	r25, Z+
 172:	91 11       	cpse	r25, r1
 174:	f8 cf       	rjmp	.-16     	; 0x166 <uart_puts+0xa>
 176:	08 95       	ret

00000178 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	71 f0       	breq	.+28     	; 0x19c <uart1_puts+0x24>
 180:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 182:	90 91 9b 00 	lds	r25, 0x009B
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 18a:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 18e:	90 91 9b 00 	lds	r25, 0x009B
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 196:	21 91       	ld	r18, Z+
 198:	21 11       	cpse	r18, r1
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <uart1_puts+0xa>
 19c:	08 95       	ret

0000019e <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 19e:	9c 01       	movw	r18, r24
 1a0:	fc 01       	movw	r30, r24
 1a2:	44 91       	lpm	r20, Z
 1a4:	44 23       	and	r20, r20
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	f9 01       	movw	r30, r18
 1ac:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 1b2:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 1b8:	9c 01       	movw	r18, r24
 1ba:	fc 01       	movw	r30, r24
 1bc:	44 91       	lpm	r20, Z
 1be:	41 11       	cpse	r20, r1
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 1c2:	08 95       	ret

000001c4 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	88 69       	ori	r24, 0x98	; 152
 1c8:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1ca:	e5 e9       	ldi	r30, 0x95	; 149
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	86 60       	ori	r24, 0x06	; 6
 1d2:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 1d4:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 1d8:	87 e6       	ldi	r24, 0x67	; 103
 1da:	89 b9       	out	0x09, r24	; 9
 1dc:	08 95       	ret

000001de <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 1de:	ea e9       	ldi	r30, 0x9A	; 154
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 1e8:	ed e9       	ldi	r30, 0x9D	; 157
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 1f2:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 99 00 	sts	0x0099, r24
 1fc:	08 95       	ret

000001fe <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	02 c0       	rjmp	.+4      	; 0x208 <uart_getc+0xa>
 204:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 206:	21 f0       	breq	.+8      	; 0x210 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 208:	5f 9b       	sbis	0x0b, 7	; 11
 20a:	fc cf       	rjmp	.-8      	; 0x204 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 20c:	8c b1       	in	r24, 0x0c	; 12
 20e:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 210:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 212:	08 95       	ret

00000214 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	02 c0       	rjmp	.+4      	; 0x21e <uart1_getc+0xa>
 21a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 21c:	39 f0       	breq	.+14     	; 0x22c <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 21e:	20 91 9b 00 	lds	r18, 0x009B
 222:	27 ff       	sbrs	r18, 7
 224:	fa cf       	rjmp	.-12     	; 0x21a <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 226:	80 91 9c 00 	lds	r24, 0x009C
 22a:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 22c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 22e:	08 95       	ret

00000230 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	81 11       	cpse	r24, r1
 234:	01 c0       	rjmp	.+2      	; 0x238 <send_lcd+0x8>
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 23a:	77 9b       	sbis	0x0e, 7	; 14
 23c:	fe cf       	rjmp	.-4      	; 0x23a <send_lcd+0xa>
  SPDR = byte;                        //send payload
 23e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 244:	80 91 62 00 	lds	r24, 0x0062
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 93 62 00 	sts	0x0062, r24
 24e:	80 91 62 00 	lds	r24, 0x0062
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	80 93 62 00 	sts	0x0062, r24
 258:	08 95       	ret

0000025a <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 25a:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 25c:	c0 91 0e 01 	lds	r28, 0x010E
 260:	8c 0f       	add	r24, r28
 262:	91 1d       	adc	r25, r1
 264:	fc 01       	movw	r30, r24
 266:	60 81       	ld	r22, Z
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 i++;   //increment to next character
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	8c 0f       	add	r24, r28
 272:	80 93 0e 01 	sts	0x010E, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 276:	80 31       	cpi	r24, 0x10	; 16
 278:	81 f0       	breq	.+32     	; 0x29a <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 27a:	80 32       	cpi	r24, 0x20	; 32
 27c:	11 f0       	breq	.+4      	; 0x282 <refresh_lcd+0x28>
}//refresh_lcd
 27e:	cf 91       	pop	r28
 280:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	85 ed       	ldi	r24, 0xD5	; 213
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <refresh_lcd+0x2a>
 288:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 28a:	60 e8       	ldi	r22, 0x80	; 128
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 292:	10 92 0e 01 	sts	0x010E, r1
}//refresh_lcd
 296:	cf 91       	pop	r28
 298:	08 95       	ret
 29a:	f5 ed       	ldi	r31, 0xD5	; 213
 29c:	fa 95       	dec	r31
 29e:	f1 f7       	brne	.-4      	; 0x29c <refresh_lcd+0x42>
 2a0:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 2a2:	60 ec       	ldi	r22, 0xC0	; 192
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 2aa:	80 91 0e 01 	lds	r24, 0x010E
 2ae:	e5 cf       	rjmp	.-54     	; 0x27a <refresh_lcd+0x20>

000002b0 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 2c4:	66 0f       	add	r22, r22
 2c6:	66 0f       	add	r22, r22
 2c8:	66 0f       	add	r22, r22
 2ca:	60 5c       	subi	r22, 0xC0	; 192
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	99 83       	std	Y+1, r25	; 0x01
 2d0:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 2d4:	85 ed       	ldi	r24, 0xD5	; 213
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <set_custom_character+0x26>
 2da:	00 00       	nop
 2dc:	e1 2e       	mov	r14, r17
 2de:	99 81       	ldd	r25, Y+1	; 0x01
 2e0:	f9 2e       	mov	r15, r25
 2e2:	87 01       	movw	r16, r14
 2e4:	08 5f       	subi	r16, 0xF8	; 248
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 2e8:	f7 01       	movw	r30, r14
 2ea:	61 91       	ld	r22, Z+
 2ec:	7f 01       	movw	r14, r30
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 2f4:	f5 ed       	ldi	r31, 0xD5	; 213
 2f6:	fa 95       	dec	r31
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <set_custom_character+0x46>
 2fa:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 2fc:	e0 16       	cp	r14, r16
 2fe:	f1 06       	cpc	r15, r17
 300:	99 f7       	brne	.-26     	; 0x2e8 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	08 95       	ret

00000312 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 312:	90 e4       	ldi	r25, 0x40	; 64
 314:	89 9f       	mul	r24, r25
 316:	60 0d       	add	r22, r0
 318:	11 24       	eor	r1, r1
 31a:	60 5c       	subi	r22, 0xC0	; 192
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

00000322 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 322:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 324:	88 23       	and	r24, r24
 326:	b9 f1       	breq	.+110    	; 0x396 <uint2lcd+0x74>
 328:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 32a:	84 36       	cpi	r24, 0x64	; 100
 32c:	98 f4       	brcc	.+38     	; 0x354 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 32e:	8a 30       	cpi	r24, 0x0A	; 10
 330:	d8 f4       	brcc	.+54     	; 0x368 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 332:	8d ec       	ldi	r24, 0xCD	; 205
 334:	c8 9f       	mul	r28, r24
 336:	81 2d       	mov	r24, r1
 338:	11 24       	eor	r1, r1
 33a:	86 95       	lsr	r24
 33c:	86 95       	lsr	r24
 33e:	86 95       	lsr	r24
 340:	6c 2f       	mov	r22, r28
 342:	2a e0       	ldi	r18, 0x0A	; 10
 344:	82 9f       	mul	r24, r18
 346:	60 19       	sub	r22, r0
 348:	11 24       	eor	r1, r1
 34a:	60 5d       	subi	r22, 0xD0	; 208
 34c:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 34e:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 350:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 354:	69 e2       	ldi	r22, 0x29	; 41
 356:	86 9f       	mul	r24, r22
 358:	61 2d       	mov	r22, r1
 35a:	11 24       	eor	r1, r1
 35c:	62 95       	swap	r22
 35e:	6f 70       	andi	r22, 0x0F	; 15
 360:	60 5d       	subi	r22, 0xD0	; 208
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 368:	89 e2       	ldi	r24, 0x29	; 41
 36a:	c8 9f       	mul	r28, r24
 36c:	81 2d       	mov	r24, r1
 36e:	11 24       	eor	r1, r1
 370:	82 95       	swap	r24
 372:	8f 70       	andi	r24, 0x0F	; 15
 374:	9c 2f       	mov	r25, r28
 376:	24 e6       	ldi	r18, 0x64	; 100
 378:	82 9f       	mul	r24, r18
 37a:	90 19       	sub	r25, r0
 37c:	11 24       	eor	r1, r1
 37e:	6d ec       	ldi	r22, 0xCD	; 205
 380:	96 9f       	mul	r25, r22
 382:	61 2d       	mov	r22, r1
 384:	11 24       	eor	r1, r1
 386:	66 95       	lsr	r22
 388:	66 95       	lsr	r22
 38a:	66 95       	lsr	r22
 38c:	60 5d       	subi	r22, 0xD0	; 208
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 394:	ce cf       	rjmp	.-100    	; 0x332 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 396:	60 e3       	ldi	r22, 0x30	; 48
 398:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 39a:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 39c:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

000003a0 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 3a0:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 3a2:	87 fd       	sbrc	r24, 7
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 3a6:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 3a8:	0c 94 91 01 	jmp	0x322	; 0x322 <uint2lcd>
 3ac:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 3ae:	6d e2       	ldi	r22, 0x2D	; 45
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 3b6:	85 ed       	ldi	r24, 0xD5	; 213
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <int2lcd+0x18>
 3bc:	00 00       	nop
 3be:	8c 2f       	mov	r24, r28
 3c0:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 3c2:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 3c4:	0c 94 91 01 	jmp	0x322	; 0x322 <uint2lcd>

000003c8 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 3c8:	6e e0       	ldi	r22, 0x0E	; 14
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

000003d0 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 3d0:	6c e0       	ldi	r22, 0x0C	; 12
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

000003d8 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 3d8:	6e e1       	ldi	r22, 0x1E	; 30
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

000003e0 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 3e0:	68 e1       	ldi	r22, 0x18	; 24
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

000003e8 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3e8:	e2 e6       	ldi	r30, 0x62	; 98
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	88 60       	ori	r24, 0x08	; 8
 3f0:	80 83       	st	Z, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	80 83       	st	Z, r24
 3f8:	08 95       	ret

000003fa <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 402:	8f e1       	ldi	r24, 0x1F	; 31
 404:	9c e1       	ldi	r25, 0x1C	; 28
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <clear_display+0xc>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <clear_display+0x12>
 40c:	00 00       	nop
 40e:	08 95       	ret

00000410 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 418:	8f e6       	ldi	r24, 0x6F	; 111
 41a:	97 e1       	ldi	r25, 0x17	; 23
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <cursor_home+0xc>
 420:	00 c0       	rjmp	.+0      	; 0x422 <cursor_home+0x12>
 422:	00 00       	nop
 424:	08 95       	ret

00000426 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 426:	60 ec       	ldi	r22, 0xC0	; 192
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

0000042e <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 42e:	60 e8       	ldi	r22, 0x80	; 128
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

00000436 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 436:	cf 93       	push	r28
 438:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 43a:	60 e2       	ldi	r22, 0x20	; 32
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 442:	85 ed       	ldi	r24, 0xD5	; 213
 444:	8a 95       	dec	r24
 446:	f1 f7       	brne	.-4      	; 0x444 <fill_spaces+0xe>
 448:	00 00       	nop
 44a:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 44c:	b1 f7       	brne	.-20     	; 0x43a <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 452:	68 2f       	mov	r22, r24
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0c 94 18 01 	jmp	0x230	; 0x230 <send_lcd>

0000045a <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	f8 01       	movw	r30, r16
 46a:	e4 0f       	add	r30, r20
 46c:	f5 1f       	adc	r31, r21
 46e:	60 81       	ld	r22, Z
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 476:	85 ed       	ldi	r24, 0xD5	; 213
 478:	8a 95       	dec	r24
 47a:	f1 f7       	brne	.-4      	; 0x478 <string2lcd+0x1e>
 47c:	00 00       	nop
 47e:	cf 5f       	subi	r28, 0xFF	; 255
 480:	4c 2f       	mov	r20, r28
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	f8 01       	movw	r30, r16
 486:	01 90       	ld	r0, Z+
 488:	00 20       	and	r0, r0
 48a:	e9 f7       	brne	.-6      	; 0x486 <string2lcd+0x2c>
 48c:	9f 01       	movw	r18, r30
 48e:	20 1b       	sub	r18, r16
 490:	31 0b       	sbc	r19, r17
 492:	22 50       	subi	r18, 0x02	; 2
 494:	31 09       	sbc	r19, r1
 496:	24 17       	cp	r18, r20
 498:	35 07       	cpc	r19, r21
 49a:	30 f7       	brcc	.-52     	; 0x468 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	99 ef       	ldi	r25, 0xF9	; 249
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <lcd_init+0x4>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <lcd_init+0xa>
 4ae:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 4b6:	60 e3       	ldi	r22, 0x30	; 48
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 4be:	8f e5       	ldi	r24, 0x5F	; 95
 4c0:	9d e6       	ldi	r25, 0x6D	; 109
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x1e>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0x24>
 4c8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 4ca:	60 e3       	ldi	r22, 0x30	; 48
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 4d2:	8f e5       	ldi	r24, 0x5F	; 95
 4d4:	9d e6       	ldi	r25, 0x6D	; 109
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <lcd_init+0x32>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <lcd_init+0x38>
 4dc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 4de:	60 e3       	ldi	r22, 0x30	; 48
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 4e6:	8f e5       	ldi	r24, 0x5F	; 95
 4e8:	9d e6       	ldi	r25, 0x6D	; 109
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <lcd_init+0x46>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <lcd_init+0x4c>
 4f0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 4f2:	68 e3       	ldi	r22, 0x38	; 56
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 4fa:	8f e1       	ldi	r24, 0x1F	; 31
 4fc:	9e e4       	ldi	r25, 0x4E	; 78
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_init+0x5a>
 502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_init+0x60>
 504:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 506:	68 e0       	ldi	r22, 0x08	; 8
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 50e:	8f e1       	ldi	r24, 0x1F	; 31
 510:	9e e4       	ldi	r25, 0x4E	; 78
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <lcd_init+0x6e>
 516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_init+0x74>
 518:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 522:	8f e1       	ldi	r24, 0x1F	; 31
 524:	9e e4       	ldi	r25, 0x4E	; 78
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <lcd_init+0x82>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_init+0x88>
 52c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 52e:	66 e0       	ldi	r22, 0x06	; 6
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 536:	8f e1       	ldi	r24, 0x1F	; 31
 538:	9e e4       	ldi	r25, 0x4E	; 78
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_init+0x96>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_init+0x9c>
 540:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 542:	6c e0       	ldi	r22, 0x0C	; 12
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 54a:	8f e1       	ldi	r24, 0x1F	; 31
 54c:	9e e4       	ldi	r25, 0x4E	; 78
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_init+0xaa>
 552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_init+0xb0>
 554:	00 00       	nop
 556:	08 95       	ret

00000558 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 558:	8f 92       	push	r8
 55a:	9f 92       	push	r9
 55c:	af 92       	push	r10
 55e:	bf 92       	push	r11
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	69 97       	sbiw	r28, 0x19	; 25
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	f4 2e       	mov	r15, r20
 582:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 584:	00 23       	and	r16, r16
 586:	59 f0       	breq	.+22     	; 0x59e <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 588:	4b 01       	movw	r8, r22
 58a:	5c 01       	movw	r10, r24
 58c:	88 24       	eor	r8, r8
 58e:	b7 fc       	sbrc	r11, 7
 590:	83 94       	inc	r8
 592:	99 24       	eor	r9, r9
 594:	aa 24       	eor	r10, r10
 596:	bb 24       	eor	r11, r11
 598:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 59a:	97 fd       	sbrc	r25, 7
 59c:	8f c0       	rjmp	.+286    	; 0x6bc <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 59e:	11 23       	and	r17, r17
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <lcd_int32+0x4c>
 5a2:	84 c0       	rjmp	.+264    	; 0x6ac <lcd_int32+0x154>
 5a4:	9e 01       	movw	r18, r28
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	69 01       	movw	r12, r18
 5ac:	59 01       	movw	r10, r18
 5ae:	88 24       	eor	r8, r8
 5b0:	8a 94       	dec	r8
 5b2:	81 0e       	add	r8, r17
 5b4:	91 2c       	mov	r9, r1
 5b6:	3f ef       	ldi	r19, 0xFF	; 255
 5b8:	83 1a       	sub	r8, r19
 5ba:	93 0a       	sbc	r9, r19
 5bc:	8c 0c       	add	r8, r12
 5be:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 5c0:	2a e0       	ldi	r18, 0x0A	; 10
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 5cc:	e6 2f       	mov	r30, r22
 5ce:	2a 8b       	std	Y+18, r18	; 0x12
 5d0:	3b 8b       	std	Y+19, r19	; 0x13
 5d2:	4c 8b       	std	Y+20, r20	; 0x14
 5d4:	5d 8b       	std	Y+21, r21	; 0x15
 5d6:	6a 89       	ldd	r22, Y+18	; 0x12
 5d8:	7b 89       	ldd	r23, Y+19	; 0x13
 5da:	8c 89       	ldd	r24, Y+20	; 0x14
 5dc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 5de:	20 e3       	ldi	r18, 0x30	; 48
 5e0:	2e 0f       	add	r18, r30
 5e2:	f5 01       	movw	r30, r10
 5e4:	21 93       	st	Z+, r18
 5e6:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 5e8:	e8 15       	cp	r30, r8
 5ea:	f9 05       	cpc	r31, r9
 5ec:	49 f7       	brne	.-46     	; 0x5c0 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 5ee:	bb 24       	eor	r11, r11
 5f0:	b3 94       	inc	r11
 5f2:	b1 0e       	add	r11, r17
 5f4:	f6 01       	movw	r30, r12
 5f6:	e1 0f       	add	r30, r17
 5f8:	f1 1d       	adc	r31, r1
 5fa:	2e e2       	ldi	r18, 0x2E	; 46
 5fc:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 5fe:	2a e0       	ldi	r18, 0x0A	; 10
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	40 e0       	ldi	r20, 0x00	; 0
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 60a:	e6 2f       	mov	r30, r22
 60c:	2a 8b       	std	Y+18, r18	; 0x12
 60e:	3b 8b       	std	Y+19, r19	; 0x13
 610:	4c 8b       	std	Y+20, r20	; 0x14
 612:	5d 8b       	std	Y+21, r21	; 0x15
 614:	6e 8b       	std	Y+22, r22	; 0x16
 616:	7f 8b       	std	Y+23, r23	; 0x17
 618:	88 8f       	std	Y+24, r24	; 0x18
 61a:	99 8f       	std	Y+25, r25	; 0x19
 61c:	6a 89       	ldd	r22, Y+18	; 0x12
 61e:	7b 89       	ldd	r23, Y+19	; 0x13
 620:	8c 89       	ldd	r24, Y+20	; 0x14
 622:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 624:	11 e0       	ldi	r17, 0x01	; 1
 626:	1b 0d       	add	r17, r11
 628:	d6 01       	movw	r26, r12
 62a:	ab 0d       	add	r26, r11
 62c:	b1 1d       	adc	r27, r1
 62e:	e0 5d       	subi	r30, 0xD0	; 208
 630:	ec 93       	st	X, r30
 632:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 634:	61 15       	cp	r22, r1
 636:	71 05       	cpc	r23, r1
 638:	81 05       	cpc	r24, r1
 63a:	91 05       	cpc	r25, r1
 63c:	01 f7       	brne	.-64     	; 0x5fe <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 63e:	ff 20       	and	r15, r15
 640:	61 f0       	breq	.+24     	; 0x65a <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 642:	e1 10       	cpse	r14, r1
 644:	39 c0       	rjmp	.+114    	; 0x6b8 <lcd_int32+0x160>
 646:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 648:	1f 15       	cp	r17, r15
 64a:	38 f4       	brcc	.+14     	; 0x65a <lcd_int32+0x102>
 64c:	f6 01       	movw	r30, r12
 64e:	e1 0f       	add	r30, r17
 650:	f1 1d       	adc	r31, r1
 652:	80 83       	st	Z, r24
 654:	1f 5f       	subi	r17, 0xFF	; 255
 656:	1f 11       	cpse	r17, r15
 658:	f9 cf       	rjmp	.-14     	; 0x64c <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 65a:	00 23       	and	r16, r16
 65c:	31 f0       	breq	.+12     	; 0x66a <lcd_int32+0x112>
 65e:	f6 01       	movw	r30, r12
 660:	e1 0f       	add	r30, r17
 662:	f1 1d       	adc	r31, r1
 664:	8d e2       	ldi	r24, 0x2D	; 45
 666:	80 83       	st	Z, r24
 668:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 66a:	11 50       	subi	r17, 0x01	; 1
 66c:	f6 01       	movw	r30, r12
 66e:	e1 0f       	add	r30, r17
 670:	f1 1d       	adc	r31, r1
 672:	60 81       	ld	r22, Z
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67a:	35 ed       	ldi	r19, 0xD5	; 213
 67c:	3a 95       	dec	r19
 67e:	f1 f7       	brne	.-4      	; 0x67c <lcd_int32+0x124>
 680:	00 00       	nop
 682:	11 11       	cpse	r17, r1
 684:	f2 cf       	rjmp	.-28     	; 0x66a <lcd_int32+0x112>

}
 686:	69 96       	adiw	r28, 0x19	; 25
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	bf 90       	pop	r11
 6a4:	af 90       	pop	r10
 6a6:	9f 90       	pop	r9
 6a8:	8f 90       	pop	r8
 6aa:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 6ac:	b1 2c       	mov	r11, r1
 6ae:	9e 01       	movw	r18, r28
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	69 01       	movw	r12, r18
 6b6:	a3 cf       	rjmp	.-186    	; 0x5fe <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 6b8:	80 e3       	ldi	r24, 0x30	; 48
 6ba:	c6 cf       	rjmp	.-116    	; 0x648 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	69 cf       	rjmp	.-302    	; 0x59e <lcd_int32+0x46>

000006cc <lcd_int16>:
 6cc:	5f 92       	push	r5
 6ce:	6f 92       	push	r6
 6d0:	7f 92       	push	r7
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	61 97       	sbiw	r28, 0x11	; 17
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	a6 2e       	mov	r10, r22
 6fc:	54 2e       	mov	r5, r20
 6fe:	62 2e       	mov	r6, r18
 700:	79 2e       	mov	r7, r25
 702:	77 1c       	adc	r7, r7
 704:	77 24       	eor	r7, r7
 706:	77 1c       	adc	r7, r7
 708:	b7 2c       	mov	r11, r7
 70a:	c7 2c       	mov	r12, r7
 70c:	d1 2c       	mov	r13, r1
 70e:	ee 27       	eor	r30, r30
 710:	ff 27       	eor	r31, r31
 712:	ec 19       	sub	r30, r12
 714:	fd 09       	sbc	r31, r13
 716:	8e 27       	eor	r24, r30
 718:	9f 27       	eor	r25, r31
 71a:	fc 01       	movw	r30, r24
 71c:	ec 0d       	add	r30, r12
 71e:	fd 1d       	adc	r31, r13
 720:	44 23       	and	r20, r20
 722:	09 f4       	brne	.+2      	; 0x726 <lcd_int16+0x5a>
 724:	8e c0       	rjmp	.+284    	; 0x842 <lcd_int16+0x176>
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	7c 01       	movw	r14, r24
 72c:	8c 01       	movw	r16, r24
 72e:	88 24       	eor	r8, r8
 730:	8a 94       	dec	r8
 732:	84 0e       	add	r8, r20
 734:	91 2c       	mov	r9, r1
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	89 1a       	sub	r8, r25
 73a:	99 0a       	sbc	r9, r25
 73c:	8e 0c       	add	r8, r14
 73e:	9f 1c       	adc	r9, r15
 740:	6a e0       	ldi	r22, 0x0A	; 10
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	cf 01       	movw	r24, r30
 746:	0e 94 80 04 	call	0x900	; 0x900 <__divmodhi4>
 74a:	26 2f       	mov	r18, r22
 74c:	e2 2f       	mov	r30, r18
 74e:	f7 2f       	mov	r31, r23
 750:	80 5d       	subi	r24, 0xD0	; 208
 752:	d8 01       	movw	r26, r16
 754:	8d 93       	st	X+, r24
 756:	8d 01       	movw	r16, r26
 758:	a8 15       	cp	r26, r8
 75a:	b9 05       	cpc	r27, r9
 75c:	89 f7       	brne	.-30     	; 0x740 <lcd_int16+0x74>
 75e:	01 e0       	ldi	r16, 0x01	; 1
 760:	05 0d       	add	r16, r5
 762:	d7 01       	movw	r26, r14
 764:	a5 0d       	add	r26, r5
 766:	b1 1d       	adc	r27, r1
 768:	8e e2       	ldi	r24, 0x2E	; 46
 76a:	8c 93       	st	X, r24
 76c:	6a e0       	ldi	r22, 0x0A	; 10
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	cf 01       	movw	r24, r30
 772:	0e 94 80 04 	call	0x900	; 0x900 <__divmodhi4>
 776:	26 2f       	mov	r18, r22
 778:	e2 2f       	mov	r30, r18
 77a:	f7 2f       	mov	r31, r23
 77c:	11 e0       	ldi	r17, 0x01	; 1
 77e:	10 0f       	add	r17, r16
 780:	d7 01       	movw	r26, r14
 782:	a0 0f       	add	r26, r16
 784:	b1 1d       	adc	r27, r1
 786:	80 5d       	subi	r24, 0xD0	; 208
 788:	8c 93       	st	X, r24
 78a:	01 2f       	mov	r16, r17
 78c:	30 97       	sbiw	r30, 0x00	; 0
 78e:	71 f7       	brne	.-36     	; 0x76c <lcd_int16+0xa0>
 790:	61 10       	cpse	r6, r1
 792:	15 c0       	rjmp	.+42     	; 0x7be <lcd_int16+0xf2>
 794:	77 20       	and	r7, r7
 796:	39 f0       	breq	.+14     	; 0x7a6 <lcd_int16+0xda>
 798:	11 e0       	ldi	r17, 0x01	; 1
 79a:	10 0f       	add	r17, r16
 79c:	f7 01       	movw	r30, r14
 79e:	e0 0f       	add	r30, r16
 7a0:	f1 1d       	adc	r31, r1
 7a2:	8d e2       	ldi	r24, 0x2D	; 45
 7a4:	80 83       	st	Z, r24
 7a6:	aa 20       	and	r10, r10
 7a8:	41 f1       	breq	.+80     	; 0x7fa <lcd_int16+0x12e>
 7aa:	81 2f       	mov	r24, r17
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	2a 2d       	mov	r18, r10
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	82 17       	cp	r24, r18
 7b4:	93 07       	cpc	r25, r19
 7b6:	0c f5       	brge	.+66     	; 0x7fa <lcd_int16+0x12e>
 7b8:	b1 2c       	mov	r11, r1
 7ba:	40 e2       	ldi	r20, 0x20	; 32
 7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <lcd_int16+0x10a>
 7be:	aa 20       	and	r10, r10
 7c0:	a1 f0       	breq	.+40     	; 0x7ea <lcd_int16+0x11e>
 7c2:	81 2f       	mov	r24, r17
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	2a 2d       	mov	r18, r10
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	2c 19       	sub	r18, r12
 7cc:	3d 09       	sbc	r19, r13
 7ce:	82 17       	cp	r24, r18
 7d0:	93 07       	cpc	r25, r19
 7d2:	5c f4       	brge	.+22     	; 0x7ea <lcd_int16+0x11e>
 7d4:	40 e3       	ldi	r20, 0x30	; 48
 7d6:	1f 5f       	subi	r17, 0xFF	; 255
 7d8:	f7 01       	movw	r30, r14
 7da:	e8 0f       	add	r30, r24
 7dc:	f9 1f       	adc	r31, r25
 7de:	40 83       	st	Z, r20
 7e0:	81 2f       	mov	r24, r17
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	82 17       	cp	r24, r18
 7e6:	93 07       	cpc	r25, r19
 7e8:	b4 f3       	brlt	.-20     	; 0x7d6 <lcd_int16+0x10a>
 7ea:	bb 20       	and	r11, r11
 7ec:	31 f0       	breq	.+12     	; 0x7fa <lcd_int16+0x12e>
 7ee:	f7 01       	movw	r30, r14
 7f0:	e1 0f       	add	r30, r17
 7f2:	f1 1d       	adc	r31, r1
 7f4:	8d e2       	ldi	r24, 0x2D	; 45
 7f6:	80 83       	st	Z, r24
 7f8:	1f 5f       	subi	r17, 0xFF	; 255
 7fa:	11 50       	subi	r17, 0x01	; 1
 7fc:	f7 01       	movw	r30, r14
 7fe:	e1 0f       	add	r30, r17
 800:	f1 1d       	adc	r31, r1
 802:	60 81       	ld	r22, Z
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	0e 94 18 01 	call	0x230	; 0x230 <send_lcd>
 80a:	95 ed       	ldi	r25, 0xD5	; 213
 80c:	9a 95       	dec	r25
 80e:	f1 f7       	brne	.-4      	; 0x80c <lcd_int16+0x140>
 810:	00 00       	nop
 812:	11 11       	cpse	r17, r1
 814:	f2 cf       	rjmp	.-28     	; 0x7fa <lcd_int16+0x12e>
 816:	61 96       	adiw	r28, 0x11	; 17
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	bf 90       	pop	r11
 834:	af 90       	pop	r10
 836:	9f 90       	pop	r9
 838:	8f 90       	pop	r8
 83a:	7f 90       	pop	r7
 83c:	6f 90       	pop	r6
 83e:	5f 90       	pop	r5
 840:	08 95       	ret
 842:	00 e0       	ldi	r16, 0x00	; 0
 844:	ce 01       	movw	r24, r28
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	7c 01       	movw	r14, r24
 84a:	90 cf       	rjmp	.-224    	; 0x76c <lcd_int16+0xa0>

0000084c <main>:
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  SPSR  |= (1<<SPI2X);            //run at double speed 
}//spi_init    

int main(){
  DDRF |= 0x08; //lcd strobe bit
 84c:	80 91 61 00 	lds	r24, 0x0061
 850:	88 60       	ori	r24, 0x08	; 8
 852:	80 93 61 00 	sts	0x0061, r24
  uart_init();  
 856:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_init>
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 85a:	87 b3       	in	r24, 0x17	; 23
 85c:	87 60       	ori	r24, 0x07	; 7
 85e:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 860:	8d b1       	in	r24, 0x0d	; 13
 862:	80 65       	ori	r24, 0x50	; 80
 864:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 866:	70 9a       	sbi	0x0e, 0	; 14

int main(){
  DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
  lcd_init();
 868:	0e 94 52 02 	call	0x4a4	; 0x4a4 <lcd_init>
  clear_display();
 86c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <clear_display>
  cursor_home();
 870:	0e 94 08 02 	call	0x410	; 0x410 <cursor_home>

  sei();
 874:	78 94       	sei
    itoa(send_seq,lcd_string,10);
    uart_puts(lcd_string);
    uart_putc('\0');
    for(i=0;i<=9;i++){_delay_ms(100);}
    send_seq++;
    send_seq=(send_seq%20);
 876:	cd ec       	ldi	r28, 0xCD	; 205
  cursor_home();

  sei();
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 878:	80 91 0f 01 	lds	r24, 0x010F
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	b9 f1       	breq	.+110    	; 0x8ee <main+0xa2>
        cursor_home();
    }//if 
//**************  end rcv portion ***************

//**************  start tx portion ***************
    uart_puts("Hi! Kyle: ");
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    itoa(send_seq,lcd_string,10);
 888:	80 91 0c 01 	lds	r24, 0x010C
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 88c:	4a e0       	ldi	r20, 0x0A	; 10
 88e:	61 e1       	ldi	r22, 0x11	; 17
 890:	71 e0       	ldi	r23, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__itoa_ncheck>
    uart_puts(lcd_string);
 898:	81 e1       	ldi	r24, 0x11	; 17
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    uart_putc('\0');
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	0e 94 9d 00 	call	0x13a	; 0x13a <uart_putc>
    for(i=0;i<=9;i++){_delay_ms(100);}
 8a6:	10 92 10 01 	sts	0x0110, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8aa:	2f ef       	ldi	r18, 0xFF	; 255
 8ac:	81 ee       	ldi	r24, 0xE1	; 225
 8ae:	94 e0       	ldi	r25, 0x04	; 4
 8b0:	21 50       	subi	r18, 0x01	; 1
 8b2:	80 40       	sbci	r24, 0x00	; 0
 8b4:	90 40       	sbci	r25, 0x00	; 0
 8b6:	e1 f7       	brne	.-8      	; 0x8b0 <main+0x64>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <main+0x6e>
 8ba:	00 00       	nop
 8bc:	80 91 10 01 	lds	r24, 0x0110
 8c0:	8f 5f       	subi	r24, 0xFF	; 255
 8c2:	80 93 10 01 	sts	0x0110, r24
 8c6:	8a 30       	cpi	r24, 0x0A	; 10
 8c8:	80 f3       	brcs	.-32     	; 0x8aa <main+0x5e>
    send_seq++;
 8ca:	80 91 0c 01 	lds	r24, 0x010C
 8ce:	8f 5f       	subi	r24, 0xFF	; 255
    send_seq=(send_seq%20);
 8d0:	8c 9f       	mul	r24, r28
 8d2:	91 2d       	mov	r25, r1
 8d4:	11 24       	eor	r1, r1
 8d6:	92 95       	swap	r25
 8d8:	9f 70       	andi	r25, 0x0F	; 15
 8da:	24 e1       	ldi	r18, 0x14	; 20
 8dc:	92 9f       	mul	r25, r18
 8de:	80 19       	sub	r24, r0
 8e0:	11 24       	eor	r1, r1
 8e2:	80 93 0c 01 	sts	0x010C, r24
  cursor_home();

  sei();
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 8e6:	80 91 0f 01 	lds	r24, 0x010F
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	49 f6       	brne	.-110    	; 0x880 <main+0x34>
        string2lcd(lcd_str_array);  //write out string if its ready
 8ee:	84 e1       	ldi	r24, 0x14	; 20
 8f0:	91 e0       	ldi	r25, 0x01	; 1
 8f2:	0e 94 2d 02 	call	0x45a	; 0x45a <string2lcd>
        rcv_rdy=0;
 8f6:	10 92 0f 01 	sts	0x010F, r1
        cursor_home();
 8fa:	0e 94 08 02 	call	0x410	; 0x410 <cursor_home>
 8fe:	c0 cf       	rjmp	.-128    	; 0x880 <main+0x34>

00000900 <__divmodhi4>:
 900:	97 fb       	bst	r25, 7
 902:	07 2e       	mov	r0, r23
 904:	16 f4       	brtc	.+4      	; 0x90a <__divmodhi4+0xa>
 906:	00 94       	com	r0
 908:	07 d0       	rcall	.+14     	; 0x918 <__divmodhi4_neg1>
 90a:	77 fd       	sbrc	r23, 7
 90c:	09 d0       	rcall	.+18     	; 0x920 <__divmodhi4_neg2>
 90e:	0e 94 b3 04 	call	0x966	; 0x966 <__udivmodhi4>
 912:	07 fc       	sbrc	r0, 7
 914:	05 d0       	rcall	.+10     	; 0x920 <__divmodhi4_neg2>
 916:	3e f4       	brtc	.+14     	; 0x926 <__divmodhi4_exit>

00000918 <__divmodhi4_neg1>:
 918:	90 95       	com	r25
 91a:	81 95       	neg	r24
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__divmodhi4_neg2>:
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255

00000926 <__divmodhi4_exit>:
 926:	08 95       	ret

00000928 <__divmodsi4>:
 928:	05 2e       	mov	r0, r21
 92a:	97 fb       	bst	r25, 7
 92c:	1e f4       	brtc	.+6      	; 0x934 <__divmodsi4+0xc>
 92e:	00 94       	com	r0
 930:	0e 94 ab 04 	call	0x956	; 0x956 <__negsi2>
 934:	57 fd       	sbrc	r21, 7
 936:	07 d0       	rcall	.+14     	; 0x946 <__divmodsi4_neg2>
 938:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodsi4>
 93c:	07 fc       	sbrc	r0, 7
 93e:	03 d0       	rcall	.+6      	; 0x946 <__divmodsi4_neg2>
 940:	4e f4       	brtc	.+18     	; 0x954 <__divmodsi4_exit>
 942:	0c 94 ab 04 	jmp	0x956	; 0x956 <__negsi2>

00000946 <__divmodsi4_neg2>:
 946:	50 95       	com	r21
 948:	40 95       	com	r20
 94a:	30 95       	com	r19
 94c:	21 95       	neg	r18
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	4f 4f       	sbci	r20, 0xFF	; 255
 952:	5f 4f       	sbci	r21, 0xFF	; 255

00000954 <__divmodsi4_exit>:
 954:	08 95       	ret

00000956 <__negsi2>:
 956:	90 95       	com	r25
 958:	80 95       	com	r24
 95a:	70 95       	com	r23
 95c:	61 95       	neg	r22
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	08 95       	ret

00000966 <__udivmodhi4>:
 966:	aa 1b       	sub	r26, r26
 968:	bb 1b       	sub	r27, r27
 96a:	51 e1       	ldi	r21, 0x11	; 17
 96c:	07 c0       	rjmp	.+14     	; 0x97c <__udivmodhi4_ep>

0000096e <__udivmodhi4_loop>:
 96e:	aa 1f       	adc	r26, r26
 970:	bb 1f       	adc	r27, r27
 972:	a6 17       	cp	r26, r22
 974:	b7 07       	cpc	r27, r23
 976:	10 f0       	brcs	.+4      	; 0x97c <__udivmodhi4_ep>
 978:	a6 1b       	sub	r26, r22
 97a:	b7 0b       	sbc	r27, r23

0000097c <__udivmodhi4_ep>:
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	5a 95       	dec	r21
 982:	a9 f7       	brne	.-22     	; 0x96e <__udivmodhi4_loop>
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	bc 01       	movw	r22, r24
 98a:	cd 01       	movw	r24, r26
 98c:	08 95       	ret

0000098e <__udivmodsi4>:
 98e:	a1 e2       	ldi	r26, 0x21	; 33
 990:	1a 2e       	mov	r1, r26
 992:	aa 1b       	sub	r26, r26
 994:	bb 1b       	sub	r27, r27
 996:	fd 01       	movw	r30, r26
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__udivmodsi4_ep>

0000099a <__udivmodsi4_loop>:
 99a:	aa 1f       	adc	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	ee 1f       	adc	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	a2 17       	cp	r26, r18
 9a4:	b3 07       	cpc	r27, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__udivmodsi4_ep>
 9ac:	a2 1b       	sub	r26, r18
 9ae:	b3 0b       	sbc	r27, r19
 9b0:	e4 0b       	sbc	r30, r20
 9b2:	f5 0b       	sbc	r31, r21

000009b4 <__udivmodsi4_ep>:
 9b4:	66 1f       	adc	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	1a 94       	dec	r1
 9be:	69 f7       	brne	.-38     	; 0x99a <__udivmodsi4_loop>
 9c0:	60 95       	com	r22
 9c2:	70 95       	com	r23
 9c4:	80 95       	com	r24
 9c6:	90 95       	com	r25
 9c8:	9b 01       	movw	r18, r22
 9ca:	ac 01       	movw	r20, r24
 9cc:	bd 01       	movw	r22, r26
 9ce:	cf 01       	movw	r24, r30
 9d0:	08 95       	ret

000009d2 <__itoa_ncheck>:
 9d2:	bb 27       	eor	r27, r27
 9d4:	4a 30       	cpi	r20, 0x0A	; 10
 9d6:	31 f4       	brne	.+12     	; 0x9e4 <__itoa_ncheck+0x12>
 9d8:	99 23       	and	r25, r25
 9da:	22 f4       	brpl	.+8      	; 0x9e4 <__itoa_ncheck+0x12>
 9dc:	bd e2       	ldi	r27, 0x2D	; 45
 9de:	90 95       	com	r25
 9e0:	81 95       	neg	r24
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__utoa_common>

000009e8 <__utoa_ncheck>:
 9e8:	bb 27       	eor	r27, r27

000009ea <__utoa_common>:
 9ea:	fb 01       	movw	r30, r22
 9ec:	55 27       	eor	r21, r21
 9ee:	aa 27       	eor	r26, r26
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	aa 1f       	adc	r26, r26
 9f6:	a4 17       	cp	r26, r20
 9f8:	10 f0       	brcs	.+4      	; 0x9fe <__utoa_common+0x14>
 9fa:	a4 1b       	sub	r26, r20
 9fc:	83 95       	inc	r24
 9fe:	50 51       	subi	r21, 0x10	; 16
 a00:	b9 f7       	brne	.-18     	; 0x9f0 <__utoa_common+0x6>
 a02:	a0 5d       	subi	r26, 0xD0	; 208
 a04:	aa 33       	cpi	r26, 0x3A	; 58
 a06:	08 f0       	brcs	.+2      	; 0xa0a <__utoa_common+0x20>
 a08:	a9 5d       	subi	r26, 0xD9	; 217
 a0a:	a1 93       	st	Z+, r26
 a0c:	00 97       	sbiw	r24, 0x00	; 0
 a0e:	79 f7       	brne	.-34     	; 0x9ee <__utoa_common+0x4>
 a10:	b1 11       	cpse	r27, r1
 a12:	b1 93       	st	Z+, r27
 a14:	11 92       	st	Z+, r1
 a16:	cb 01       	movw	r24, r22
 a18:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <strrev>

00000a1c <strrev>:
 a1c:	dc 01       	movw	r26, r24
 a1e:	fc 01       	movw	r30, r24
 a20:	67 2f       	mov	r22, r23
 a22:	71 91       	ld	r23, Z+
 a24:	77 23       	and	r23, r23
 a26:	e1 f7       	brne	.-8      	; 0xa20 <strrev+0x4>
 a28:	32 97       	sbiw	r30, 0x02	; 2
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <strrev+0x18>
 a2c:	7c 91       	ld	r23, X
 a2e:	6d 93       	st	X+, r22
 a30:	70 83       	st	Z, r23
 a32:	62 91       	ld	r22, -Z
 a34:	ae 17       	cp	r26, r30
 a36:	bf 07       	cpc	r27, r31
 a38:	c8 f3       	brcs	.-14     	; 0xa2c <strrev+0x10>
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
